var searchIndex = {};
searchIndex["gmime"] = {"doc":"","items":[[3,"Bytes","gmime","A shared immutable byte slice (the equivalent of `Rc<[u8]>`).",null,null],[3,"Error","","A generic error capable of representing various error domains (types).",null,null],[3,"Variant","","A generic immutable value capable of carrying various types.",null,null],[3,"VariantType","","Describes `Variant` types.",null,null],[3,"IOCondition","","",null,null],[4,"SeekType","","",null,null],[13,"Cur","","",0,null],[13,"Set","","",0,null],[13,"End","","",0,null],[3,"Source","","",null,null],[3,"Priority","","The priority of sources",null,null],[3,"DateTime","","",null,null],[4,"ChecksumType","","",null,null],[13,"Md5","","",1,null],[13,"Sha1","","",1,null],[13,"Sha256","","",1,null],[3,"File","","",null,null],[3,"ApplicationPkcs7Mime","","An application/pkcs7-mime MIME part.",null,null],[3,"AutocryptHeader","","An object containing Autocrypt information about a given e-mail address, as derived from a message header.",null,null],[3,"AutocryptHeaderList","","A list of Autocrypt headers, typically extracted from a GMimeMessage.",null,null],[3,"Certificate","","An object containing useful information about a certificate.",null,null],[3,"CertificateList","","A collection of `Certificate` objects.",null,null],[3,"ContentDisposition","","A data structure representing a Content-Disposition.",null,null],[3,"ContentType","","A data structure representing a Content-Type.",null,null],[3,"CryptoContext","","A crypto context for use with MIME.",null,null],[3,"DataWrapper","","A wrapper for a stream which may be encoded.",null,null],[3,"DecryptResult","","An object containing the results from decrypting an encrypted stream.",null,null],[3,"Filter","","Base class for filters used by `StreamFilter`.",null,null],[3,"FilterBasic","","A basic encoder/decoder filter for the MIME encodings.",null,null],[3,"FilterBest","","A filter for calculating the best encoding and/or charset to encode the data passed through it.",null,null],[3,"FilterCharset","","A filter to convert between charsets.",null,null],[3,"FilterDos2Unix","","A filter to convert a stream from Windows/DOS line endings to Unix line endings.",null,null],[3,"FilterEnriched","","A filter for converting text/enriched or text/richtext textual streams into text/html.",null,null],[3,"FilterFrom","","A filter for armoring or escaping lines beginning with \"From \".",null,null],[3,"FilterGZip","","A filter for compresing or decompressing a gzip stream.",null,null],[3,"FilterHTML","","A filter for converting text/plain into text/html.",null,null],[3,"FilterSmtpData","","A filter to byte-stuff SMTP DATA.",null,null],[3,"FilterStrip","","A filter for stripping whitespace from the end of lines.",null,null],[3,"FilterUnix2Dos","","A filter to convert a stream from Windows/DOS line endings to Unix line endings.",null,null],[3,"FilterWindows","","A filter for detecting whether or not a text stream claimed to be iso-8859-X is really that charset or if it is really a Windows-CP125x charset.",null,null],[3,"FilterYenc","","A filter for yEncoding or yDecoding a stream.",null,null],[3,"GpgContext","","A GnuPG crypto context.",null,null],[3,"Header","","A message or mime-part header.",null,null],[3,"HeaderList","","A list of message or mime-part headers.",null,null],[3,"InternetAddress","","An RFC 2822 Address object.",null,null],[3,"InternetAddressList","","A collection of `InternetAddress` objects.",null,null],[3,"InternetAddressMailbox","","An RFC 2822 Mailbox address.",null,null],[3,"MessagePart","","A message/rfc822 or message/news MIME part.",null,null],[3,"Multipart","","A base MIME multipart object.",null,null],[3,"MultipartEncrypted","","A multipart/encrypted MIME part.",null,null],[3,"MultipartSigned","","A multipart/signed MIME part.",null,null],[3,"Object","","Base class for all MIME parts.",null,null],[3,"Param","","A parameter name/value pair as used in the Content-Type and Content-Disposition headers.",null,null],[3,"ParamList","","A list of Content-Type or Content-Disposition parameters.",null,null],[3,"Parser","","A MIME parser context.",null,null],[3,"Part","","A leaf-node MIME part object.",null,null],[3,"Pkcs7Context","","A PKCS7 crypto context.",null,null],[3,"Signature","","An object containing useful information about a signature.",null,null],[3,"SignatureList","","A collection of `Signature` objects.",null,null],[3,"Stream","","Abstract I/O stream class.",null,null],[3,"StreamBuffer","","A buffered stream wrapper around any `Stream` object.",null,null],[3,"StreamCat","","A concatenation of other `Stream` objects.",null,null],[3,"StreamFile","","A `Stream` wrapper around standard-c FILE pointers.",null,null],[3,"StreamFilter","","A `Stream` which passes data through any `Filter` objects.",null,null],[3,"StreamFs","","A `Stream` wrapper around POSIX file descriptors.",null,null],[3,"StreamGIO","","A `Stream` wrapper around GLib's GIO streams.",null,null],[3,"StreamMem","","A memory-backed `Stream`.",null,null],[3,"StreamMmap","","A memory-mapped `Stream`.",null,null],[3,"StreamNull","","A `Stream` which has no backing store.",null,null],[3,"StreamPipe","","A `Stream` wrapper around pipes.",null,null],[3,"TextPart","","A text MIME part object.",null,null],[3,"FormatOptions","","Format options for serializing various GMime objects.",null,null],[3,"PartIter","","A MIME part iterator.",null,null],[3,"DecryptFlags","","",null,null],[3,"FilterBestFlags","","",null,null],[3,"Message","","A MIME Message object.",null,null],[3,"MessagePartial","","A message/partial MIME part.",null,null],[3,"ParserOptions","","A set of parser options used by `Parser` and various other parsing functions.",null,null],[4,"AddressType","","An address type.",null,null],[13,"Sender","","",2,null],[13,"From","","",2,null],[13,"ReplyTo","","",2,null],[13,"To","","",2,null],[13,"Cc","","",2,null],[13,"Bcc","","",2,null],[4,"AutocryptPreferEncrypt","","A description of the user's preference for encrypted messaging.",null,null],[13,"None","","",3,null],[13,"Mutual","","",3,null],[4,"EncryptFlags","","Encryption flags.",null,null],[13,"None","","",4,null],[13,"AlwaysTrust","","",4,null],[13,"NoCompress","","",4,null],[13,"Symmetric","","",4,null],[13,"ThrowKeyids","","",4,null],[4,"FilterFromMode","","The mode for a `FilterFrom` filter.",null,null],[13,"Default","","",5,null],[13,"Armor","","",5,null],[4,"FilterGZipMode","","The mode for the `FilterGZip` filter.",null,null],[13,"Zip","","",6,null],[13,"Unzip","","",6,null],[4,"Format","","An enum of formats.",null,null],[13,"Message","","",7,null],[13,"Mbox","","",7,null],[13,"Mmdf","","",7,null],[4,"NewLineFormat","","There are two commonly used line-endings used by modern Operating Systems. Unix-based systems such as Linux and Mac OS use a single character ('\\n' aka LF) to represent the end of line where-as Windows (or DOS) uses a sequence of two characters (\"\\r\\n\" aka CRLF). Most text-based network protocols such as SMTP, POP3, and IMAP use the CRLF sequence as well.",null,null],[13,"Unix","","",8,null],[13,"Dos","","",8,null],[4,"OpenPGPData","","The type of OpenPGP data found, if any.",null,null],[13,"None","","",9,null],[13,"Encrypted","","",9,null],[13,"Signed","","",9,null],[13,"PublicKey","","",9,null],[13,"PrivateKey","","",9,null],[4,"ParamEncodingMethod","","The MIME specifications specify that the proper method for encoding Content-Type and Content-Disposition parameter values is the method described in rfc2231`</a>`. However, it is common for some older email clients to improperly encode using the method described in rfc2047`</a>` instead.",null,null],[13,"Default","","",10,null],[13,"Rfc2231","","",10,null],[13,"Rfc2047","","",10,null],[4,"PubKeyAlgo","","A public-key algorithm.",null,null],[13,"Default","","",11,null],[13,"Rsa","","",11,null],[13,"RsaE","","",11,null],[13,"RsaS","","",11,null],[13,"ElgE","","",11,null],[13,"Dsa","","",11,null],[13,"Ecc","","",11,null],[13,"Elg","","",11,null],[13,"Ecdsa","","",11,null],[13,"Ecdh","","",11,null],[13,"Eddsa","","",11,null],[4,"RfcComplianceMode","","An RFC compliance mode.",null,null],[13,"Loose","","",12,null],[13,"Strict","","",12,null],[4,"SecureMimeType","","The S/MIME data type.",null,null],[13,"CompressedData","","",13,null],[13,"EnvelopedData","","",13,null],[13,"SignedData","","",13,null],[13,"CertsOnly","","",13,null],[13,"Unknown","","",13,null],[4,"SeekWhence","","Relative seek position.",null,null],[13,"Set","","",14,null],[13,"Cur","","",14,null],[13,"End","","",14,null],[4,"SignatureStatus","","A value representing the signature status bit flags for a particular `Signature`.",null,null],[13,"Valid","","",15,null],[13,"Green","","",15,null],[13,"Red","","",15,null],[13,"KeyRevoked","","",15,null],[13,"KeyExpired","","",15,null],[13,"SigExpired","","",15,null],[13,"KeyMissing","","",15,null],[13,"CrlMissing","","",15,null],[13,"CrlTooOld","","",15,null],[13,"BadPolicy","","",15,null],[13,"SysError","","",15,null],[13,"TofuConflict","","",15,null],[4,"StreamBufferMode","","The buffering mode for a `StreamBuffer` stream.",null,null],[13,"Read","","",16,null],[13,"Write","","",16,null],[4,"Trust","","The trust level of a certificate. Trust level tries to answer the question: \"How much is the user willing to rely on cryptographic identity assertions made by the owner of this certificate?\"",null,null],[13,"Unknown","","",17,null],[13,"Undefined","","",17,null],[13,"Never","","",17,null],[13,"Marginal","","",17,null],[13,"Full","","",17,null],[13,"Ultimate","","",17,null],[4,"Validity","","The validity level of a certificate's User ID. Validity level tries to answer the question: \"How strongly do we believe that this certificate belongs to the party it says it belongs to?\"",null,null],[13,"Unknown","","",18,null],[13,"Undefined","","",18,null],[13,"Never","","",18,null],[13,"Marginal","","",18,null],[13,"Full","","",18,null],[13,"Ultimate","","",18,null],[4,"VerifyFlags","","Signature verification flags.",null,null],[13,"VerifyNone","","",19,null],[4,"DigestAlgo","","A hash algorithm.",null,null],[13,"AlgoDefault","","",20,null],[13,"AlgoMd5","","",20,null],[13,"AlgoSha1","","",20,null],[13,"AlgoRipemd160","","",20,null],[13,"AlgoMd2","","",20,null],[13,"AlgoTiger192","","",20,null],[13,"AlgoHaval5160","","",20,null],[13,"AlgoSha256","","",20,null],[13,"AlgoSha384","","",20,null],[13,"AlgoSha512","","",20,null],[13,"AlgoSha224","","",20,null],[13,"AlgoMd4","","",20,null],[13,"AlgoCrc32","","",20,null],[13,"AlgoCrc32Rfc1510","","",20,null],[13,"AlgoCrc32Rfc2440","","",20,null],[4,"ContentEncoding","","A Content-Transfer-Encoding enumeration.",null,null],[13,"EncodeDefault","","",21,null],[13,"Encode7bit","","",21,null],[13,"Encode8bit","","",21,null],[13,"EncodeBinary","","",21,null],[13,"EncodeBase64","","",21,null],[13,"EncodeQuotedprintable","","",21,null],[13,"EncodeUuencode","","",21,null],[4,"EncodingConstraint","","Used with functions like `FilterBestExt::encoding` and `ObjectExt::encode` as the 'constraint' argument. These values provide a means of letting the filter know what the encoding constraints are for the stream.",null,null],[13,"Encode7bit","","",22,null],[13,"Encode8bit","","",22,null],[13,"EncodeBinary","","",22,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"applicationpkcs7mime"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[11,"static_type","","",23,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new application/pkcs7-mime object. ## `type_` The type of S/MIME data contained within the part.",23,{"inputs":[{"name":"securemimetype"}],"output":{"name":"applicationpkcs7mime"}}],[11,"sign","","Attempts to sign the `entity` MIME part with `userid`'s private key using S/MIME. If successful, a new application/pkcs7-mime object is returned. ## `entity` a `Object` ## `userid` the user id to sign with",23,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"autocryptheader"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"static_type","","",24,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AutocryptHeader` object.",24,{"inputs":[],"output":{"name":"autocryptheader"}}],[11,"new_from_string","","Creates a new `AutocryptHeader` object based on the value of an Autocrypt: header.",24,{"inputs":[{"name":"str"}],"output":{"name":"autocryptheader"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"autocryptheaderlist"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"static_type","","",25,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AutocryptHeaderList` object.",25,{"inputs":[],"output":{"name":"autocryptheaderlist"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"certificate"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"static_type","","",26,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Certificate` object.",26,{"inputs":[],"output":{"name":"certificate"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"certificatelist"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[11,"static_type","","",27,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `CertificateList`.",27,{"inputs":[],"output":{"name":"certificatelist"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"contentdisposition"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[11,"static_type","","",28,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `ContentDisposition` object.",28,{"inputs":[],"output":{"name":"contentdisposition"}}],[11,"parse","","Parses the input string into a `ContentDisposition` object. ## `options` a `ParserOptions` or `None` ## `str` Content-Disposition field value",28,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["contentdisposition"],"name":"option"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"static_type","","",29,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a Content-Type object with type `type_` and subtype `subtype`. ## `type_` the MIME type or `None` for the default value ## `subtype` the MIME subtype or `None` for the default value",29,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"contenttype"}}],[11,"parse","","Parses the input string into a `ContentType` object. ## `options` a `ParserOptions` or `None` ## `str` input string containing a content-type (and params)",29,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["contenttype"],"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"cryptocontext"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"static_type","","",30,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new crypto context for the specified `protocol`. ## `protocol` the crypto protocol",30,{"inputs":[{"name":"str"}],"output":{"name":"cryptocontext"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"datawrapper"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"static_type","","",31,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `DataWrapper` object.",31,{"inputs":[],"output":{"name":"datawrapper"}}],[11,"new_with_stream","","Creates a new `DataWrapper` object around `stream`. ## `stream` a `Stream` ## `encoding` stream's encoding",31,{"inputs":[{"name":"p"},{"name":"contentencoding"}],"output":{"name":"datawrapper"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"decryptresult"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"static_type","","",32,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `DecryptResult` object.",32,{"inputs":[],"output":{"name":"decryptresult"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"static_type","","",33,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"filterbasic"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"static_type","","",34,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new basic filter for `encoding`. ## `encoding` a `ContentEncoding` ## `encode` `true` to encode or `false` to decode",34,{"inputs":[{"name":"contentencoding"},{"name":"bool"}],"output":{"name":"filterbasic"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"filterbest"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"static_type","","",35,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new GMimeFilterBest filter. `flags` are used to determine which information to keep statistics of. If the `FilterBestFlags::Charset` bit is set, the filter will be able to compute the best charset for encoding the stream of data filtered. If the `FilterBestFlags::Encoding` bit is set, the filter will be able to compute the best Content-Transfer-Encoding for use with the stream being filtered.",35,{"inputs":[{"name":"filterbestflags"}],"output":{"name":"filterbest"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"filtercharset"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"static_type","","",36,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `FilterCharset` filter. ## `from_charset` charset to convert from ## `to_charset` charset to convert to",36,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"filtercharset"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"filterdos2unix"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"static_type","","",37,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `FilterDos2Unix` filter. ## `ensure_newline` `true` if the filter should ensure that the stream ends in a new line",37,{"inputs":[{"name":"bool"}],"output":{"name":"filterdos2unix"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"filterenriched"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"static_type","","",38,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new GMimeFilterEnriched object. ## `flags` flags",38,{"inputs":[{"name":"u32"}],"output":{"name":"filterenriched"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"filterfrom"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"static_type","","",39,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new GMimeFilterFrom filter. If `mode` is `FilterFromMode::Armor`, the from-filter will encode from lines using the quoted-printable encoding resulting in \"=46rom \". Using the `FilterFromMode::Default` or `FilterFromMode::Escape` mode (they are the same), from lines will be escaped to \">From \".",39,{"inputs":[{"name":"filterfrommode"}],"output":{"name":"filterfrom"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"filtergzip"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"static_type","","",40,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new gzip (or gunzip) filter. ## `mode` zip or unzip ## `level` compression level",40,{"inputs":[{"name":"filtergzipmode"},{"name":"i32"}],"output":{"name":"filtergzip"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"filterhtml"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"static_type","","",41,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new GMimeFilterHTML filter which can be used to convert a plain UTF-8 text stream into an html stream. ## `flags` html flags ## `colour` citation colour",41,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"filterhtml"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"filtersmtpdata"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"static_type","","",42,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `FilterSmtpData` filter.",42,{"inputs":[],"output":{"name":"filtersmtpdata"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"filterstrip"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"static_type","","",43,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `FilterStrip` filter which will strip trailing whitespace from every line of input passed through the filter.",43,{"inputs":[],"output":{"name":"filterstrip"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"filterunix2dos"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"static_type","","",44,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `FilterUnix2Dos` filter. ## `ensure_newline` `true` if the filter should ensure that the stream ends in a new line",44,{"inputs":[{"name":"bool"}],"output":{"name":"filterunix2dos"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"filterwindows"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"static_type","","",45,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new GMimeFilterWindows filter. When a stream of text has been filtered, it can be determined whether or not said text stream was in `claimed_charset` or the equivalent Windows-CP125# charset. ## `claimed_charset` charset that a text stream claims to be",45,{"inputs":[{"name":"str"}],"output":{"name":"filterwindows"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"filteryenc"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"static_type","","",46,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new yEnc filter. ## `encode` encode vs decode",46,{"inputs":[{"name":"bool"}],"output":{"name":"filteryenc"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"gpgcontext"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"static_type","","",47,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new gpg crypto context object.",47,{"inputs":[],"output":{"name":"gpgcontext"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"static_type","","",48,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"headerlist"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"static_type","","",49,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `HeaderList` object. ## `options` a `ParserOptions` or `None`",49,{"inputs":[{"name":"p"}],"output":{"name":"headerlist"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"internetaddress"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"static_type","","",50,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"internetaddresslist"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"static_type","","",51,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `InternetAddressList`.",51,{"inputs":[],"output":{"name":"internetaddresslist"}}],[11,"parse","","Construct a list of internet addresses from the given string. ## `options` a `ParserOptions` or `None` ## `str` a string containing internet addresses",51,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["internetaddresslist"],"name":"option"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"internetaddressmailbox"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"static_type","","",52,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `InternetAddress` object with the specified `name` and `addr`. ## `name` person's name ## `addr` person's address",52,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"internetaddressmailbox"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"messagepart"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"static_type","","",53,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new MIME message part object with a default content-type of message/`subtype`. ## `subtype` message subtype or `None` for \"rfc822\"",53,{"inputs":[{"name":"str"}],"output":{"name":"messagepart"}}],[11,"new_with_message","","Creates a new MIME message part object with a default content-type of message/`subtype` containing `message`. ## `subtype` message subtype or `None` for \"rfc822\" ## `message` message",53,{"inputs":[{"name":"str"},{"name":"message"}],"output":{"name":"messagepart"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"multipart"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"static_type","","",54,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new MIME multipart object with a default content-type of multipart/mixed.",54,{"inputs":[],"output":{"name":"multipart"}}],[11,"new_with_subtype","","Creates a new MIME multipart object with a content-type of multipart/`subtype`. ## `subtype` content-type subtype",54,{"inputs":[{"name":"str"}],"output":{"name":"multipart"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"multipartencrypted"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",55,null],[11,"static_type","","",55,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new MIME multipart/encrypted object.",55,{"inputs":[],"output":{"name":"multipartencrypted"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"multipartsigned"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"static_type","","",56,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new MIME multipart/signed object.",56,{"inputs":[],"output":{"name":"multipartsigned"}}],[11,"sign","","Attempts to sign the `content` MIME part with `userid`'s private key using the `ctx` signing context. If successful, a new multipart/signed object is returned. ## `ctx` a `CryptoContext` ## `entity` MIME part to sign ## `userid` user id to sign with",56,{"inputs":[{"name":"p"},{"name":"q"},{"name":"str"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"static_type","","",57,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Performs a lookup of registered `Object` subclasses, registered using `Object::register_type`, to find an appropriate class capable of handling MIME parts of the specified Content-Type. If no class has been registered to handle that type, it looks for a registered class that can handle `content_type`'s media type. If that also fails, then it will use the generic part class, `Part`. ## `options` a `ParserOptions` or `None` ## `content_type` a `ContentType` object",57,{"inputs":[{"name":"p"},{"name":"contenttype"}],"output":{"name":"object"}}],[11,"new_type","","Performs a lookup of registered `Object` subclasses, registered using `Object::register_type`, to find an appropriate class capable of handling MIME parts of type `type_`/`subtype`. If no class has been registered to handle that type, it looks for a registered class that can handle `type_`. If that also fails, then it will use the generic part class, `Part`. ## `options` a `ParserOptions` or `None` ## `type_` mime type ## `subtype` mime subtype",57,{"inputs":[{"name":"p"},{"name":"str"},{"name":"str"}],"output":{"name":"object"}}],[11,"register_type","","Registers the object type `object_type` for use with the `Object::new_type` convenience function.",57,{"inputs":[{"name":"str"},{"name":"str"},{"name":"type"}],"output":null}],[11,"type_registry_init","","",57,{"inputs":[],"output":null}],[11,"type_registry_shutdown","","",57,{"inputs":[],"output":null}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"param"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"static_type","","",58,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"paramlist"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"static_type","","",59,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Content-Type or Content-Disposition parameter list.",59,{"inputs":[],"output":{"name":"paramlist"}}],[11,"parse","","Parses the input string into a parameter list. ## `options` a `ParserOptions` or `None` ## `str` a string to parse",59,{"inputs":[{"name":"parseroptions"},{"name":"str"}],"output":{"generics":["paramlist"],"name":"option"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"static_type","","",60,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new parser object.",60,{"inputs":[],"output":{"name":"parser"}}],[11,"new_with_stream","","Creates a new parser object preset to parse `stream`. ## `stream` raw message or part stream",60,{"inputs":[{"name":"p"}],"output":{"name":"parser"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"part"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"static_type","","",61,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new MIME Part object with a default content-type of application/octet-stream.",61,{"inputs":[],"output":{"name":"part"}}],[11,"new_with_type","","Creates a new MIME Part with a sepcified type. ## `type_` content-type string ## `subtype` content-subtype string",61,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"part"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"pkcs7context"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"static_type","","",62,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new pkcs7 crypto context object.",62,{"inputs":[],"output":{"name":"pkcs7context"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"static_type","","",63,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Signature` object.",63,{"inputs":[],"output":{"name":"signature"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"signaturelist"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"static_type","","",64,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `SignatureList`.",64,{"inputs":[],"output":{"name":"signaturelist"}}],[11,"default","","",64,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"static_type","","",65,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"streambuffer"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"static_type","","",66,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new GMimeStreamBuffer object. ## `source` source stream ## `mode` buffering mode",66,{"inputs":[{"name":"p"},{"name":"streambuffermode"}],"output":{"name":"streambuffer"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"streamcat"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"static_type","","",67,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `StreamCat` object.",67,{"inputs":[],"output":{"name":"streamcat"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"streamfile"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"static_type","","",68,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"open","","Creates a new `StreamFile` object for the specified `path`. ## `path` the path to a file ## `mode` as in fopen(3)",68,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["stream","error"],"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"streamfilter"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"static_type","","",69,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `StreamFilter` object using `stream` as the source stream. ## `stream` source stream",69,{"inputs":[{"name":"p"}],"output":{"name":"streamfilter"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"streamfs"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"static_type","","",70,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `StreamFs` object around `fd`. ## `fd` a file descriptor",70,{"inputs":[{"name":"i32"}],"output":{"name":"streamfs"}}],[11,"new_with_bounds","","Creates a new `StreamFs` object around `fd` with bounds `start` and `end`. ## `fd` a file descriptor ## `start` start boundary ## `end` end boundary",70,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i64"}],"output":{"name":"streamfs"}}],[11,"open","","Creates a new `StreamFs` object for the specified `path`. ## `path` the path to a file ## `flags` as in open(2) ## `mode` as in open(2)",70,{"inputs":[{"name":"str"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["stream","error"],"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"streamgio"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"static_type","","",71,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `StreamGIO` wrapper around a `gio::File` object. ## `file` a `gio::File`",71,{"inputs":[{"name":"p"}],"output":{"name":"streamgio"}}],[11,"new_with_bounds","","Creates a new `StreamGIO` stream around a `gio::File` with bounds `start` and `end`. ## `file` a `gio::File` ## `start` start boundary ## `end` end boundary",71,{"inputs":[{"name":"p"},{"name":"i64"},{"name":"i64"}],"output":{"name":"streamgio"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"streammem"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"static_type","","",72,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `StreamMem` object.",72,{"inputs":[],"output":{"name":"streammem"}}],[11,"new_with_buffer","","Creates a new `StreamMem` object and initializes the stream contents with the first `len` bytes of `buffer`. ## `buffer` stream data ## `len` buffer length",72,null],[11,"default","","",72,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"streammmap"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"static_type","","",73,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `StreamMmap` object around `fd`. ## `fd` file descriptor ## `prot` protection flags ## `flags` map flags",73,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"streammmap"}}],[11,"new_with_bounds","","Creates a new `StreamMmap` object around `fd` with bounds `start` and `end`. ## `fd` file descriptor ## `prot` protection flags ## `flags` map flags ## `start` start boundary ## `end` end boundary",73,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i64"},{"name":"i64"}],"output":{"name":"streammmap"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"streamnull"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"static_type","","",74,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `StreamNull` object.",74,{"inputs":[],"output":{"name":"streamnull"}}],[11,"default","","",74,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"streampipe"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"static_type","","",75,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `StreamPipe` object around `fd`. ## `fd` a pipe descriptor",75,{"inputs":[{"name":"i32"}],"output":{"name":"streampipe"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"textpart"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"static_type","","",76,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new text MIME part object with a default content-type of text/plain.",76,{"inputs":[],"output":{"name":"textpart"}}],[11,"new_with_subtype","","Creates a new text MIME part with a sepcified subtype. ## `subtype` textual subtype string",76,{"inputs":[{"name":"str"}],"output":{"name":"textpart"}}],[11,"default","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"formatoptions"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",77,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates a new set of `FormatOptions`.",77,{"inputs":[],"output":{"name":"formatoptions"}}],[11,"add_hidden_header","","Adds the given header to the list of headers that should be hidden. ## `header` a header name",77,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"clear_hidden_headers","","Clears the list of headers that should be hidden.",77,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","Clones a `FormatOptions`.",77,{"inputs":[{"name":"self"}],"output":{"generics":["formatoptions"],"name":"option"}}],[11,"create_newline_filter","","Creates a `Filter` suitable for converting line-endings to the currently set new-line format. ## `ensure_newline` `true` if the output must always end with a new line",77,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["filter"],"name":"option"}}],[11,"get_newline","","Gets a string representing the currently set new-line format.",77,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_newline_format","","Gets the new-line format to use when writing out messages and headers.",77,{"inputs":[{"name":"self"}],"output":{"name":"newlineformat"}}],[11,"get_param_encoding_method","","Gets the parameter encoding method to use for `Param` parameters that do not already have an encoding method specified.",77,{"inputs":[{"name":"self"}],"output":{"name":"paramencodingmethod"}}],[11,"is_hidden_header","","Gets whether or not the specified header should be hidden. ## `header` the name of a header",77,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"remove_hidden_header","","Removes the given header from the list of headers that should be hidden. ## `header` a header name",77,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"set_newline_format","","Sets the new-line format that should be used when writing headers and messages. ## `newline` a `NewLineFormat`",77,{"inputs":[{"name":"self"},{"name":"newlineformat"}],"output":null}],[11,"set_param_encoding_method","","Sets the parameter encoding method to use when encoding parameters which do not have an encoding method specified.",77,{"inputs":[{"name":"self"},{"name":"paramencodingmethod"}],"output":null}],[11,"get_default","","Gets the default format options.",77,{"inputs":[],"output":{"generics":["formatoptions"],"name":"option"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"partiter"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",78,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates a new `PartIter` for iterating over `toplevel`'s subparts. ## `toplevel` a `Object` to use as the toplevel",78,{"inputs":[{"name":"p"}],"output":{"name":"partiter"}}],[11,"clone","","Clones the `self`, including its current state.",78,{"inputs":[{"name":"self"}],"output":{"generics":["partiter"],"name":"option"}}],[11,"get_current","","Gets the `Object` at the current `PartIter` position.",78,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"get_parent","","Gets the parent of the `Object` at the current `PartIter` position.",78,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"get_path","","Gets the path of the current `Object` in the MIME structure used to initialize `self`.",78,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_toplevel","","Gets the toplevel `Object` used to initialize `self`.",78,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"is_valid","","Checks that the current state of `self` is valid.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"jump_to","","Updates the state of `self` to point to the `Object` specified by `path`. ## `path` a string representing the path to jump to",78,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"next","","Advances to the next part in the MIME structure used to initialize `self`.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"prev","","Rewinds to the previous part in the MIME structure used to initialize `self`.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Removes the `Object` at the current position from its parent. If successful, `self` is advanced to the next position (since the current position will become invalid).",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"replace","","Replaces the `Object` at the current position with `replacement`. ## `replacement` a `Object`",78,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"reset","","Resets the state of `self` to its initial state.",78,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"addresstype"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"addresstype"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"addresstype"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"autocryptpreferencrypt"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"autocryptpreferencrypt"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"autocryptpreferencrypt"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"encryptflags"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"encryptflags"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"encryptflags"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"filterfrommode"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"filterfrommode"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"filterfrommode"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"filtergzipmode"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"filtergzipmode"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"filtergzipmode"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"newlineformat"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"newlineformat"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"newlineformat"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"openpgpdata"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"openpgpdata"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"openpgpdata"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"paramencodingmethod"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"paramencodingmethod"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"paramencodingmethod"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"pubkeyalgo"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"pubkeyalgo"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"pubkeyalgo"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"rfccompliancemode"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"rfccompliancemode"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"rfccompliancemode"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"securemimetype"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"securemimetype"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"securemimetype"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"seekwhence"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"seekwhence"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"seekwhence"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"signaturestatus"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"signaturestatus"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"signaturestatus"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"streambuffermode"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"streambuffermode"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"streambuffermode"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"trust"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"trust"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"trust"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"validity"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"validity"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"validity"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"verifyflags"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"verifyflags"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"verifyflags"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"decryptflags"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"name":"bool"}}],[11,"le","","",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"name":"bool"}}],[11,"gt","","",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"name":"bool"}}],[11,"ge","","",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"name":"bool"}}],[11,"cmp","","",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"name":"ordering"}}],[11,"hash","","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",79,null],[18,"EXPORT_SESSION_KEY","","",79,null],[11,"empty","","Returns an empty set of flags.",79,{"inputs":[],"output":{"name":"decryptflags"}}],[11,"all","","Returns the set containing all flags.",79,{"inputs":[],"output":{"name":"decryptflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",79,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",79,{"inputs":[{"name":"u32"}],"output":{"generics":["decryptflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",79,{"inputs":[{"name":"u32"}],"output":{"name":"decryptflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"name":"decryptflags"}}],[11,"bitor_assign","","Adds the set of flags.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"name":"decryptflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"name":"decryptflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":{"name":"decryptflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",79,{"inputs":[{"name":"self"},{"name":"decryptflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",79,{"inputs":[{"name":"self"}],"output":{"name":"decryptflags"}}],[11,"extend","","",79,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",79,{"inputs":[{"name":"t"}],"output":{"name":"decryptflags"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"filterbestflags"}}],[11,"partial_cmp","","",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"name":"bool"}}],[11,"le","","",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"name":"bool"}}],[11,"gt","","",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"name":"bool"}}],[11,"ge","","",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"name":"bool"}}],[11,"cmp","","",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"name":"ordering"}}],[11,"hash","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"CHARSET","","",80,null],[18,"ENCODING","","",80,null],[11,"empty","","Returns an empty set of flags.",80,{"inputs":[],"output":{"name":"filterbestflags"}}],[11,"all","","Returns the set containing all flags.",80,{"inputs":[],"output":{"name":"filterbestflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",80,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",80,{"inputs":[{"name":"u32"}],"output":{"generics":["filterbestflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",80,{"inputs":[{"name":"u32"}],"output":{"name":"filterbestflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"name":"filterbestflags"}}],[11,"bitor_assign","","Adds the set of flags.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"name":"filterbestflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"name":"filterbestflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":{"name":"filterbestflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",80,{"inputs":[{"name":"self"},{"name":"filterbestflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",80,{"inputs":[{"name":"self"}],"output":{"name":"filterbestflags"}}],[11,"extend","","",80,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",80,{"inputs":[{"name":"t"}],"output":{"name":"filterbestflags"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"digestalgo"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"digestalgo"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"digestalgo"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"encodingconstraint"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"encodingconstraint"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"encodingconstraint"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"static_type","","",81,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","If `pretty_headers` is `true`, then the standard rfc822 headers are initialized so as to put headers in a nice friendly order. This is strictly a cosmetic thing, so if you are unsure, it is safe to say no (`false`). ## `pretty_headers` make pretty headers",81,{"inputs":[{"name":"bool"}],"output":{"name":"message"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"messagepartial"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"static_type","","",82,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new MIME message/partial object. ## `id` message/partial part id ## `number` message/partial part number ## `total` total number of message/partial parts",82,{"inputs":[{"name":"str"},{"name":"i32"},{"name":"i32"}],"output":{"name":"messagepartial"}}],[11,"reconstruct_message","","Reconstructs the GMimeMessage from the given message/partial parts in `partials`. ## `partials` an array of message/partial mime parts ## `num` the number of elements in `partials`",82,{"inputs":[{"name":"vec"}],"output":{"generics":["message"],"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"parseroptions"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"static_type","","",83,{"inputs":[],"output":{"name":"type"}}],[11,"new","","Creates a new set of `ParserOptions`.",83,{"inputs":[],"output":{"name":"parseroptions"}}],[11,"clone","","Clones a `ParserOptions`.",83,{"inputs":[{"name":"self"}],"output":{"generics":["parseroptions"],"name":"option"}}],[11,"get_address_compliance_mode","","Gets the compliance mode that should be used when parsing rfc822 addresses.",83,{"inputs":[{"name":"self"}],"output":{"name":"rfccompliancemode"}}],[11,"get_allow_addresses_without_domain","","Gets whether or not the rfc822 address parser should allow addresses without a domain.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_fallback_charsets","","Gets the fallback charsets to try when decoding 8-bit headers.",83,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[11,"get_parameter_compliance_mode","","Gets the compliance mode that should be used when parsing Content-Type and Content-Disposition parameters.",83,{"inputs":[{"name":"self"}],"output":{"name":"rfccompliancemode"}}],[11,"get_rfc2047_compliance_mode","","Gets the compliance mode that should be used when parsing rfc2047 encoded words.",83,{"inputs":[{"name":"self"}],"output":{"name":"rfccompliancemode"}}],[11,"set_address_compliance_mode","","Sets the compliance mode that should be used when parsing rfc822 addresses.",83,{"inputs":[{"name":"self"},{"name":"rfccompliancemode"}],"output":null}],[11,"set_allow_addresses_without_domain","","Sets whether the rfc822 address parser should allow addresses without a domain.",83,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_fallback_charsets","","Sets the fallback charsets to try when decoding 8-bit headers.",83,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"set_parameter_compliance_mode","","Sets the compliance mode that should be used when parsing Content-Type and Content-Disposition parameters.",83,{"inputs":[{"name":"self"},{"name":"rfccompliancemode"}],"output":null}],[11,"set_rfc2047_compliance_mode","","Sets the compliance mode that should be used when parsing rfc2047 encoded words.",83,{"inputs":[{"name":"self"},{"name":"rfccompliancemode"}],"output":null}],[11,"get_default","","Gets the default parser options.",83,{"inputs":[],"output":{"generics":["parseroptions"],"name":"option"}}],[11,"default","","",83,{"inputs":[],"output":{"name":"self"}}],[8,"ApplicationPkcs7MimeExt","","Trait containing all `ApplicationPkcs7Mime` methods.",null,null],[10,"get_smime_type","","Gets the smime-type value of the Content-Type header.",84,{"inputs":[{"name":"self"}],"output":{"name":"securemimetype"}}],[10,"verify","","Attempts to verify the signed `self` part and extract the original MIME entity. ## `flags` a `VerifyFlags` ## `entity` the extracted entity",84,{"inputs":[{"name":"self"},{"name":"verifyflags"}],"output":{"generics":["error"],"name":"result"}}],[8,"AutocryptHeaderExt","","Trait containing all `AutocryptHeader` methods.",null,null],[10,"clone","","If address and type already match between `src` and `self`, copy keydata, prefer_encrypt, effective_date from `src` to `self`. ## `src` a `AutocryptHeader` object",85,{"inputs":[{"name":"self"},{"name":"autocryptheader"}],"output":null}],[10,"get_address","","Gets the internal address of the Autocrypt header, or `None` if not set.",85,{"inputs":[{"name":"self"}],"output":{"generics":["internetaddressmailbox"],"name":"option"}}],[10,"get_address_as_string","","Gets the internal address of the Autocrypt header as a C string, or `None` if not set.",85,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_effective_date","","Gets the effective date of the Autocrypt header, or `None` if not set.",85,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[10,"get_keydata","","Gets the raw keydata of the Autocrypt header, or `None` if not set.",85,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"option"}}],[10,"get_prefer_encrypt","","Gets the encryption preference stated by the Autocrypt header.",85,{"inputs":[{"name":"self"}],"output":{"name":"autocryptpreferencrypt"}}],[10,"is_complete","","When dealing with Autocrypt headers derived from a message, some sender addresses will not have a legitimate/complete header associated with them. When a given sender address has no complete header of a specific type, it should \"reset\" the state of the associated address.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_address","","Set the address associated with the autocrypt_header. ## `address` a `InternetAddressMailbox` value",85,{"inputs":[{"name":"self"},{"name":"internetaddressmailbox"}],"output":null}],[10,"set_address_from_string","","Set the address associated with the autocrypt_header. ## `address` a `None`-terminated string that is a raw e-mail address",85,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_effective_date","","Set the effective date associated with the Autocrypt header. ## `effective_date` a `glib::DateTime` object",85,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":null}],[10,"set_keydata","","Set the raw key data associated with the Autocrypt header.",85,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[10,"set_prefer_encrypt","","Set the encryption preference associated with the Autocrypt header. ## `pref` a `AutocryptPreferEncrypt` value",85,{"inputs":[{"name":"self"},{"name":"autocryptpreferencrypt"}],"output":null}],[10,"to_string","","Gets the string representation of the Autocrypt header, or `None` on error. For example, it might return:",85,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"string"}}],[8,"AutocryptHeaderListExt","","Trait containing all `AutocryptHeaderList` methods.",null,null],[10,"add","","Adds a the passed `AutocryptHeader` to the list. ## `header` a `AutocryptHeader` object",86,{"inputs":[{"name":"self"},{"name":"autocryptheader"}],"output":null}],[10,"add_missing_addresses","","Adds a new incomplete `AutocryptHeader` object for each InternetAddressMailbox found in `addresses`. ## `addresses` an `InternetAddressList` object",86,{"inputs":[{"name":"self"},{"name":"internetaddresslist"}],"output":{"name":"u32"}}],[10,"get_count","","See how many Autocrypt headers are in the list.",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_header_at","","Get the Nth header in the list (returns `None` on error, or if `index` is out of bounds) ## `index` an index into the list",86,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["autocryptheader"],"name":"option"}}],[10,"get_header_for_address","","Gets the Autocrypt header corresponding to the given `mailbox`. ## `mailbox` an `InternetAddressMailbox` object",86,{"inputs":[{"name":"self"},{"name":"internetaddressmailbox"}],"output":{"generics":["autocryptheader"],"name":"option"}}],[10,"remove_incomplete","","Remove all incomplete Autocrypt headers from the list.",86,{"inputs":[{"name":"self"}],"output":null}],[8,"CertificateExt","","Trait containing all `Certificate` methods.",null,null],[10,"get_created","","Get the creation date of the certificate's key.",87,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[10,"get_digest_algo","","Get the digest algorithm used by the certificate.",87,{"inputs":[{"name":"self"}],"output":{"name":"digestalgo"}}],[10,"get_email","","Get the email address associated with the certificate. If the certificate contains more than one email address with different validities, the email address with the highest validity is returned. If more than one email address appears in the certificate with the same (highest) validity, the first such email address will be returned.",87,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_expires","","Get the expiration date of the certificate's key.",87,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[10,"get_fingerprint","","Get the certificate's key fingerprint.",87,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_id_validity","","Get the validity of the certificate's identity information. This validity applies to the name, email, and user_id fields associated with the certificate.",87,{"inputs":[{"name":"self"}],"output":{"name":"validity"}}],[10,"get_issuer_name","","Get the certificate's issuer name.",87,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_issuer_serial","","Get the certificate's issuer serial.",87,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_key_id","","Get the certificate's key id.",87,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_name","","Get the name associated with the certificate. For email certificates, this is usually the name of the person who controls the certificate (encoded in UTF-8). If the certificate contains more than one name with different validities, the name with the highest validity is returned. If more than one name appears in the certificate with the same (highest) validity, the first such name will be returned.",87,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_pubkey_algo","","Get the public-key algorithm used by the certificate.",87,{"inputs":[{"name":"self"}],"output":{"name":"pubkeyalgo"}}],[10,"get_trust","","Get the certificate trust.",87,{"inputs":[{"name":"self"}],"output":{"name":"trust"}}],[10,"get_user_id","","Get the certificate's full User ID. If the certificate contains more than one User ID with different validities, the User ID with the highest validity is returned. If more than one User ID appears in the certificate with the same (highest) validity, the first such User ID will be returned.",87,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_created","","Set the creation date of the certificate's key. ## `created` creation date",87,{"inputs":[{"name":"self"},{"name":"c_long"}],"output":null}],[10,"set_digest_algo","","Set the digest algorithm used by the certificate. ## `algo` a `DigestAlgo`",87,{"inputs":[{"name":"self"},{"name":"digestalgo"}],"output":null}],[10,"set_email","","Set the email address associated with the certificate. (e.g. \"jane@example.org\") ## `email` certificate's email",87,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_expires","","Set the expiration date of the certificate's key. ## `expires` expiration date",87,{"inputs":[{"name":"self"},{"name":"c_long"}],"output":null}],[10,"set_fingerprint","","Set the certificate's key fingerprint. ## `fingerprint` fingerprint string",87,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_id_validity","","Set the validity associated with the certificate's name, email, and user_id. ## `validity` a `Validity` representing the validity of the certificate's identity information.",87,{"inputs":[{"name":"self"},{"name":"validity"}],"output":null}],[10,"set_issuer_name","","Set the certificate's issuer name. ## `issuer_name` certificate's issuer name",87,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_issuer_serial","","Set the certificate's issuer serial. ## `issuer_serial` certificate's issuer serial",87,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_key_id","","Set the certificate's key id. ## `key_id` key id",87,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_name","","Set the name associated with the certificate. For email certificates, this is usually the name of the person who controls the certificate (encoded in UTF-8). (e.g. \"Jane Doe\") ## `name` certificate's name",87,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_pubkey_algo","","Set the public-key algorithm used by the certificate. ## `algo` a `PubKeyAlgo`",87,{"inputs":[{"name":"self"},{"name":"pubkeyalgo"}],"output":null}],[10,"set_trust","","Set the certificate trust. ## `trust` a `Trust` value",87,{"inputs":[{"name":"self"},{"name":"trust"}],"output":null}],[10,"set_user_id","","Set the certificate's full User ID. By convention, this is usually a mail name-addr as described in RFC 5322. (e.g. \"Jane Doe <jane@example.org>\") ## `user_id` the full User ID for a certificate",87,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"CertificateListExt","","Trait containing all `CertificateList` methods.",null,null],[10,"add","","Adds a `Certificate` to the `CertificateList`. ## `cert` a `Certificate`",88,{"inputs":[{"name":"self"},{"name":"certificate"}],"output":{"name":"i32"}}],[10,"clear","","Clears the list of certificates.",88,{"inputs":[{"name":"self"}],"output":null}],[10,"contains","","Checks whether or not the specified `Certificate` is contained within the `CertificateList`. ## `cert` a `Certificate`",88,{"inputs":[{"name":"self"},{"name":"certificate"}],"output":{"name":"bool"}}],[10,"get_certificate","","Gets the `Certificate` at the specified index. ## `index` index of `Certificate` to get",88,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["certificate"],"name":"option"}}],[10,"index_of","","Gets the index of the specified `Certificate` inside the `CertificateList`. ## `cert` a `Certificate`",88,{"inputs":[{"name":"self"},{"name":"certificate"}],"output":{"name":"i32"}}],[10,"insert","","Inserts a `Certificate` into the `CertificateList` at the specified index. ## `index` index to insert at ## `cert` a `Certificate`",88,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"certificate"}],"output":null}],[10,"length","","Gets the length of the list.",88,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"remove","","Removes a `Certificate` from the `CertificateList`. ## `cert` a `Certificate`",88,{"inputs":[{"name":"self"},{"name":"certificate"}],"output":{"name":"bool"}}],[10,"remove_at","","Removes a `Certificate` from the `CertificateList` at the specified index. ## `index` index of the certificate to remove",88,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"set_certificate","","Sets the `Certificate` at the specified index to `cert`. ## `index` index of `Certificate` to set ## `cert` a `Certificate`",88,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"certificate"}],"output":null}],[8,"ContentDispositionExt","","Trait containing all `ContentDisposition` methods.",null,null],[10,"encode","","Encodes the Content-Disposition header. ## `options` a `FormatOptions` or `None`",89,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_disposition","","Gets the disposition or `None` on fail.",89,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_parameter","","Gets the parameter value specified by `name` if it's available. ## `name` parameter name",89,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_parameters","","Gets the Content-Disposition parameter list.",89,{"inputs":[{"name":"self"}],"output":{"generics":["paramlist"],"name":"option"}}],[10,"is_attachment","","Determines if a Content-Disposition has a value of \"attachment\".",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_disposition","","Sets the disposition to `value` which may be one of `GMIME_DISPOSITION_ATTACHMENT` or `GMIME_DISPOSITION_INLINE` or, by your choice, any other string which would indicate how the MIME part should be displayed by the MUA. ## `value` disposition value",89,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_parameter","","Sets a parameter on the Content-Disposition.",89,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[8,"ContentTypeExt","","Trait containing all `ContentType` methods.",null,null],[10,"encode","","Encodes the Content-Disposition header. ## `options` a `FormatOptions` or `None`",90,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_media_subtype","","Gets the Content-Type's media sub-type.",90,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_media_type","","Gets the Content-Type's media type.",90,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_mime_type","","Allocates a string buffer containing the type and subtype defined by the `self`.",90,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_parameter","","Gets the parameter value specified by `name` if it's available. ## `name` parameter name (aka attribute)",90,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_parameters","","Gets the Content-Type's parameter list.",90,{"inputs":[{"name":"self"}],"output":{"generics":["paramlist"],"name":"option"}}],[10,"is_type","","Compares the given type and subtype with that of the given mime type object. ## `type_` MIME type to compare against ## `subtype` MIME subtype to compare against",90,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[10,"set_media_subtype","","Sets the Content-Type's media subtype. ## `subtype` media subtype",90,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_media_type","","Sets the Content-Type's media type. ## `type_` media type",90,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_parameter","","Sets a parameter on the Content-Type.",90,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[8,"CryptoContextExt","","Trait containing all `CryptoContext` methods.",null,null],[10,"decrypt","","Decrypts the ciphertext input stream and writes the resulting cleartext to the output stream.",91,{"inputs":[{"name":"self"},{"name":"decryptflags"},{"name":"p"},{"name":"q"},{"name":"r"}],"output":{"generics":["decryptresult","error"],"name":"result"}}],[10,"digest_id","","Gets the digest id based on the digest name. ## `name` digest name",91,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"digestalgo"}}],[10,"digest_name","","Gets the digest name based on the digest id `digest`. ## `digest` digest id",91,{"inputs":[{"name":"self"},{"name":"digestalgo"}],"output":{"generics":["string"],"name":"option"}}],[10,"export_keys","","Exports the keys/certificates in `keys` to the stream `ostream` from the key/certificate database controlled by `self`.",91,{"inputs":[{"name":"self"},{"name":"str"},{"name":"p"}],"output":{"generics":["i32","error"],"name":"result"}}],[10,"get_encryption_protocol","","Gets the encryption protocol for the crypto context.",91,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_key_exchange_protocol","","Gets the key exchange protocol for the crypto context.",91,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_signature_protocol","","Gets the signature protocol for the crypto context.",91,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"import_keys","","Imports a stream of keys/certificates contained within `istream` into the key/certificate database controlled by `self`. ## `istream` input stream (containing keys)",91,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["i32","error"],"name":"result"}}],[10,"sign","","Signs the input stream and writes the resulting signature to the output stream. ## `detach` `true` if `ostream` should be the detached signature; otherwise, `false` ## `userid` private key to use to sign the stream ## `istream` input stream ## `ostream` output stream",91,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"p"},{"name":"q"}],"output":{"generics":["i32","error"],"name":"result"}}],[10,"verify","","Verifies the signature. If `istream` is a clearsigned stream, you should pass `None` as the `sigstream` parameter and may wish to provide an `ostream` argument for GMime to output the original plaintext into. Otherwise `sigstream` is assumed to be the signature stream and is used to verify the integirity of the `istream`. ## `flags` a `VerifyFlags` ## `istream` input stream ## `sigstream` detached-signature stream ## `ostream` output stream for use with encapsulated signature input streams",91,{"inputs":[{"name":"self"},{"name":"verifyflags"},{"name":"p"},{"name":"r"},{"name":"t"}],"output":{"generics":["option","error"],"name":"result"}}],[8,"DataWrapperExt","","Trait containing all `DataWrapper` methods.",null,null],[10,"get_encoding","","Gets the encoding type of the stream wrapped by `self`.",92,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[10,"get_stream","","Gets a reference to the stream wrapped by `self`.",92,{"inputs":[{"name":"self"}],"output":{"generics":["stream"],"name":"option"}}],[10,"set_encoding","","Sets the encoding type of the internal stream. ## `encoding` encoding",92,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":null}],[10,"set_stream","","Replaces the wrapper's internal stream with `stream`. Don't forget, if `stream` is not of the same encoding as the old stream, you'll want to call `DataWrapperExt::set_encoding` as well.",92,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"write_to_stream","","Writes the raw (decoded) data to the output stream. ## `stream` output stream",92,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"isize"}}],[8,"DecryptResultExt","","Trait containing all `DecryptResult` methods.",null,null],[10,"get_mdc","","Get the mdc digest algorithm used.",93,{"inputs":[{"name":"self"}],"output":{"name":"digestalgo"}}],[10,"get_recipients","","Gets the list of certificates that the stream had been encrypted to.",93,{"inputs":[{"name":"self"}],"output":{"generics":["certificatelist"],"name":"option"}}],[10,"get_session_key","","Get the session key used for this decryption.",93,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_signatures","","Gets a list of signatures if the encrypted stream had also been signed.",93,{"inputs":[{"name":"self"}],"output":{"generics":["signaturelist"],"name":"option"}}],[10,"set_mdc","","Set the mdc digest algorithm used. ## `mdc` a `DigestAlgo`",93,{"inputs":[{"name":"self"},{"name":"digestalgo"}],"output":null}],[10,"set_recipients","","Sets the list of certificates that the stream had been encrypted to. ## `recipients` A `CertificateList`",93,{"inputs":[{"name":"self"},{"name":"certificatelist"}],"output":null}],[10,"set_session_key","","Set the session key to be returned by this decryption result. ## `session_key` a string representing the session key or `None` to unset the key",93,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_signatures","","Sets the list of signatures. ## `signatures` A `SignatureList`",93,{"inputs":[{"name":"self"},{"name":"signaturelist"}],"output":null}],[8,"FilterExt","","Trait containing all `Filter` methods.",null,null],[10,"backup","","Sets number of bytes backed up on the input, new calls replace previous ones ## `data` data to backup ## `length` length of `data`",94,null],[10,"complete","","Completes the filtering. ## `inbuf` input buffer ## `inlen` input buffer length ## `prespace` prespace buffer length ## `outbuf`",94,null],[10,"copy","","Copies `self` into a new `Filter` object.",94,{"inputs":[{"name":"self"}],"output":{"generics":["filter"],"name":"option"}}],[10,"filter","","Filters the input data and writes it to `out`. ## `inbuf` input buffer ## `inlen` input buffer length ## `prespace` prespace buffer length ## `outbuf`",94,null],[10,"reset","","Resets the filter.",94,{"inputs":[{"name":"self"}],"output":null}],[10,"set_size","","Ensure this much size is available for filter output (if required) ## `size` requested size for the output buffer ## `keep` `true` if existing data in the output buffer should be kept",94,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[8,"FilterBestExt","","Trait containing all `FilterBest` methods.",null,null],[10,"charset","","Calculates the best charset for encoding the stream filtered through the `self` filter.",95,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"encoding","","Calculates the most efficient Content-Transfer-Encoding for the stream filtered through `self` that fits within the encoding `constraint`. ## `constraint` a `EncodingConstraint`",95,{"inputs":[{"name":"self"},{"name":"encodingconstraint"}],"output":{"name":"contentencoding"}}],[8,"FilterGZipExt","","Trait containing all `FilterGZip` methods.",null,null],[8,"FilterWindowsExt","","Trait containing all `FilterWindows` methods.",null,null],[10,"is_windows_charset","","Determines whether or not a Windows-CP125# charset has been detected so far.",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"real_charset","","Figures out the real charset that the text is encoded in based on whether or not Windows-CP125# characters were found.",96,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[8,"FilterYencExt","","Trait containing all `FilterYenc` methods.",null,null],[10,"get_crc","","Get the computed crc or (guint32) -1 on fail.",97,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_pcrc","","Get the computed part crc or (guint32) -1 on fail.",97,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"set_crc","","Sets the current crc32 value on the yEnc filter `self` to `crc`. ## `crc` crc32",97,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[10,"set_state","","Sets the current state of the yencoder/ydecoder ## `state` encode/decode state",97,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[8,"HeaderExt","","Trait containing all `Header` methods.",null,null],[10,"format_addrlist","","Parses the `value` and then re-formats it to conform to the formatting options, folding the value if necessary. ## `options` a `FormatOptions` or `None` ## `value` a Sender, From, Reply-To, To, Cc, or Bcc header value ## `charset` a charset (note: unused)",98,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"format_content_disposition","","Parses the `value` and then re-formats it to conform to the formatting options, folding the value if necessary. ## `options` a `FormatOptions` or `None` ## `value` a Content-Disposition header value ## `charset` a charset (note: unused)",98,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"format_content_type","","Parses the `value` and then re-formats it to conform to the formatting options, folding the value if necessary. ## `options` a `FormatOptions` or `None` ## `value` a Content-Type header value ## `charset` a charset (note: unused)",98,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"format_default","","Parses the `value` and then re-formats it to conform to the formatting options, folding the value if necessary. ## `options` a `FormatOptions` or `None` ## `value` a header value ## `charset` a charset to use when encoding the `value`",98,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"format_message_id","","Parses the `value` and then re-formats it to conform to the formatting options, folding the value if necessary. ## `options` a `FormatOptions` or `None` ## `value` a Message-Id or Content-Id header value ## `charset` a charset (note: unused)",98,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"format_received","","Parses the `value` and then re-formats it to conform to the formatting options, folding the value if necessary. ## `options` a `FormatOptions` or `None` ## `value` a Received header value ## `charset` a charset (note: unused)",98,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"format_references","","Parses the `value` and then re-formats it to conform to the formatting options, folding the value if necessary. ## `options` a `FormatOptions` or `None` ## `value` a References or In-Reply-To header value ## `charset` a charset (note: unused)",98,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_name","","Gets the header's name.",98,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_offset","","Gets the header's stream offset if known.",98,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_raw_name","","Gets the header's raw name. The raw header name is the complete string up to (but not including) the ':' separating the header's name from its value. This string may be different from the value returned by `HeaderExt::get_name` if the parsed message's header contained trailing whitespace after the header name, such as: \"Subject : this is the subject\\r\\n\".",98,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_raw_value","","Gets the header's raw (folded) value.",98,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_value","","Gets the header's unfolded value.",98,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_raw_value","","Sets the header's raw value. ## `raw_value` the raw value",98,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_value","","Sets the header's decoded value. ## `options` a `FormatOptions` or `None` ## `value` the new header value ## `charset` a charset",98,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"str"}],"output":null}],[10,"write_to_stream","","Write the header to the specified stream. ## `options` a `FormatOptions` or `None` ## `stream` a `Stream`",98,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"isize"}}],[8,"HeaderListExt","","Trait containing all `HeaderList` methods.",null,null],[10,"append","","Appends a header. If `value` is `None`, a space will be set aside for it (useful for setting the order of headers before values can be obtained for them) otherwise the header will be unset. ## `name` header name ## `value` header value ## `charset` a charset",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[10,"clear","","Removes all of the headers from the `HeaderList`.",99,{"inputs":[{"name":"self"}],"output":null}],[10,"contains","","Checks whether or not a header exists. ## `name` header name",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"get_count","","Gets the number of headers contained within the header list.",99,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_header","","Gets the first header with the specified name. ## `name` header name",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["header"],"name":"option"}}],[10,"get_header_at","","Gets the header at the specified `index` within the list. ## `index` the 0-based index of the header",99,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["header"],"name":"option"}}],[10,"prepend","","Prepends a header. If `value` is `None`, a space will be set aside for it (useful for setting the order of headers before values can be obtained for them) otherwise the header will be unset. ## `name` header name ## `value` header value ## `charset` a charset",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[10,"remove","","Remove the first instance of the specified header. ## `name` header name",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"remove_at","","Removes the header at the specified `index` from `self`. ## `index` the 0-based index of the header to remove",99,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set","","Set the value of the specified header. If `value` is `None` and the header, `name`, had not been previously set, a space will be set aside for it (useful for setting the order of headers before values can be obtained for them) otherwise the header will be unset.",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[10,"to_string","","Allocates a string buffer containing the raw rfc822 headers contained in `self`. ## `options` a `FormatOptions` or `None`",99,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"string"}}],[10,"write_to_stream","","Write the headers to a stream. ## `options` a `FormatOptions` or `None` ## `stream` output stream",99,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"isize"}}],[8,"InternetAddressExt","","Trait containing all `InternetAddress` methods.",null,null],[10,"get_charset","","Gets the charset to be used when encoding the name of the mailbox or group.",100,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_name","","Gets the display name of the `InternetAddress`.",100,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_charset","","Set the charset to use for encoding the name of the mailbox or group. ## `charset` the charset to use when encoding the name or `None` to use the defaults",100,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_name","","Set the display name of the `InternetAddress`.",100,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"to_string","","Allocates a string containing the contents of the `InternetAddress` object. ## `options` a `FormatOptions` or `None` ## `encode` `true` if the address should be rfc2047 encoded",100,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":{"name":"string"}}],[8,"InternetAddressListExt","","Trait containing all `InternetAddressList` methods.",null,null],[10,"add","","Adds an `InternetAddress` to the `InternetAddressList`. ## `ia` a `InternetAddress`",101,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"append","","Adds all of the addresses in `append` to `self`. ## `append` a `InternetAddressList`",101,{"inputs":[{"name":"self"},{"name":"internetaddresslist"}],"output":null}],[10,"clear","","Clears the list of addresses.",101,{"inputs":[{"name":"self"}],"output":null}],[10,"contains","","Checks whether or not the specified `InternetAddress` is contained within the `InternetAddressList`. ## `ia` a `InternetAddress`",101,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_address","","Gets the `InternetAddress` at the specified index. ## `index` index of `InternetAddress` to get",101,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["internetaddress"],"name":"option"}}],[10,"index_of","","Gets the index of the specified `InternetAddress` inside the `InternetAddressList`. ## `ia` a `InternetAddress`",101,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"insert","","Inserts an `InternetAddress` into the `InternetAddressList` at the specified index. ## `index` index to insert at ## `ia` a `InternetAddress`",101,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"}],"output":null}],[10,"length","","Gets the length of the list.",101,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"prepend","","Inserts all of the addresses in `prepend` to the beginning of `self`. ## `prepend` a `InternetAddressList`",101,{"inputs":[{"name":"self"},{"name":"internetaddresslist"}],"output":null}],[10,"remove","","Removes an `InternetAddress` from the `InternetAddressList`. ## `ia` a `InternetAddress`",101,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"remove_at","","Removes an `InternetAddress` from the `InternetAddressList` at the specified index. ## `index` index to remove",101,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"set_address","","Sets the `InternetAddress` at the specified index to `ia`. ## `index` index of `InternetAddress` to set ## `ia` a `InternetAddress`",101,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"}],"output":null}],[10,"to_string","","Allocates a string buffer containing the rfc822 formatted addresses in `self`. ## `options` a `FormatOptions` or `None` ## `encode` `true` if the address should be rfc2047 encoded",101,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bool"}],"output":{"name":"string"}}],[8,"InternetAddressMailboxExt","","Trait containing all `InternetAddressMailbox` methods.",null,null],[10,"get_addr","","Gets the addr-spec of the internet address mailbox.",102,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_idn_addr","","Gets the IDN ascii-encoded addr-spec.",102,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_addr","","Set the mailbox address. ## `addr` contact's email address",102,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"MessagePartExt","","Trait containing all `MessagePart` methods.",null,null],[10,"get_message","","Gets the message object on the message part object `self`.",103,{"inputs":[{"name":"self"}],"output":{"generics":["message"],"name":"option"}}],[10,"set_message","","Sets the `message` object on the message part object `self`. ## `message` message",103,{"inputs":[{"name":"self"},{"name":"message"}],"output":null}],[8,"MultipartExt","","Trait containing all `Multipart` methods.",null,null],[10,"add","","Appends a mime part to `self`. ## `part` a `Object`",104,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"clear","","Removes all subparts from `self`.",104,{"inputs":[{"name":"self"}],"output":null}],[10,"contains","","Checks if `part` is contained within `self`. ## `part` a `Object`",104,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"get_boundary","","Gets the boundary on the multipart. If the internal boundary is `None`, then an auto-generated boundary will be set on the multipart and returned.",104,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_count","","Gets the number of parts contained within `self`.",104,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_epilogue","","Gets the epilogue on the multipart.",104,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_part","","Gets the part at the specified `index` within the multipart. ## `index` the 0-based index of the part",104,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_prologue","","Gets the prologue on the multipart.",104,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_subpart_from_content_id","","Gets the mime part with the content-id `content_id` from the multipart `self`. ## `content_id` the content id of the part to look for",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["object"],"name":"option"}}],[10,"index_of","","Gets the 0-based index of `part` within `self`. ## `part` a `Object`",104,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"insert","","Inserts `part` into `self` at the specified `index`. ## `index` the 0-based index to insert the part ## `part` a `Object`",104,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"}],"output":null}],[10,"remove","","Removes the specified `part` from `self`. ## `part` a `Object`",104,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"remove_at","","Removes the part at the specified `index` from `self`. ## `index` the 0-based index of the part to remove",104,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["object"],"name":"option"}}],[10,"replace","","Replaces the part at the specified `index` within `self` with `replacement`. ## `index` the 0-based index of the part to replace ## `replacement` a `Object` to use as the replacement",104,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"p"}],"output":{"generics":["object"],"name":"option"}}],[10,"set_boundary","","Sets `boundary` as the boundary on the multipart. If `boundary` is `None`, then a boundary will be auto-generated for you. ## `boundary` boundary or `None` to autogenerate one",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_epilogue","","Sets the epilogue on the multipart. ## `epilogue` epilogue",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_prologue","","Sets the prologue on the multipart. ## `prologue` prologue",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"MultipartEncryptedExt","","Trait containing all `MultipartEncrypted` methods.",null,null],[10,"decrypt","","Attempts to decrypt the encrypted MIME part contained within the multipart/encrypted object `self`.",105,{"inputs":[{"name":"self"},{"name":"decryptflags"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[8,"MultipartSignedExt","","Trait containing all `MultipartSigned` methods.",null,null],[10,"verify","","Attempts to verify the signed MIME part contained within the multipart/signed object `self`. ## `flags` a `VerifyFlags`",106,{"inputs":[{"name":"self"},{"name":"verifyflags"}],"output":{"generics":["option","error"],"name":"result"}}],[8,"ObjectExt","","Trait containing all `Object` methods.",null,null],[10,"append_header","","Appends a new header to the header list. ## `header` header name ## `value` header value ## `charset` a charset",107,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[10,"encode","","Calculates and sets the most efficient Content-Transfer-Encoding for this `Object` and all child parts based on the `constraint` provided. ## `constraint` a `EncodingConstraint`",107,{"inputs":[{"name":"self"},{"name":"encodingconstraint"}],"output":null}],[10,"get_autocrypt_headers","","",107,{"inputs":[{"name":"self"},{"name":"datetime"},{"name":"str"},{"name":"internetaddresslist"},{"name":"bool"}],"output":{"generics":["autocryptheaderlist"],"name":"option"}}],[10,"get_content_disposition","","Gets the `ContentDisposition` for the specified MIME object.",107,{"inputs":[{"name":"self"}],"output":{"generics":["contentdisposition"],"name":"option"}}],[10,"get_content_disposition_parameter","","Gets the value of the Content-Disposition parameter specified by `name`, or `None` if the parameter does not exist. ## `name` parameter name",107,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_content_id","","Gets the Content-Id of the MIME object or NULL if one is not set.",107,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_content_type","","Gets the `ContentType` object for the given MIME object or `None` on fail.",107,{"inputs":[{"name":"self"}],"output":{"generics":["contenttype"],"name":"option"}}],[10,"get_content_type_parameter","","Gets the value of the content-type param `name` set on the MIME part `self`. ## `name` param name",107,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_disposition","","Gets the MIME object's disposition if set or `None` otherwise.",107,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_header","","Gets the value of the first header with the specified name. ## `header` header name",107,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_header_list","","Get the header list for `self`.",107,{"inputs":[{"name":"self"}],"output":{"generics":["headerlist"],"name":"option"}}],[10,"get_headers","","Allocates a string buffer containing all of the MIME object's raw headers. ## `options` a `FormatOptions` or `None`",107,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[10,"prepend_header","","Prepends a new header to the header list. ## `header` header name ## `value` header value ## `charset` a charset",107,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[10,"remove_header","","Removed the specified header if it exists. ## `header` header name",107,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"set_content_disposition","","Set the content disposition for the specified mime part and then serializes it to the Content-Disposition header field. ## `disposition` a `ContentDisposition` object",107,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":null}],[10,"set_content_disposition_parameter","","Add a content-disposition parameter to the specified mime part.",107,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"set_content_id","","Sets the Content-Id of the MIME object. ## `content_id` content-id (addr-spec portion)",107,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_content_type","","Sets the content-type for the specified MIME object and then serializes it to the Content-Type header field. ## `content_type` a `ContentType` object",107,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":null}],[10,"set_content_type_parameter","","Sets the content-type param `name` to the value `value`.",107,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[10,"set_disposition","","Sets the disposition to `disposition` which may be one of `GMIME_DISPOSITION_ATTACHMENT` or `GMIME_DISPOSITION_INLINE` or, by your choice, any other string which would indicate how the MIME part should be displayed by the MUA. ## `disposition` disposition (\"attachment\" or \"inline\")",107,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_header","","Sets a header to the specified value. ## `header` header name ## `value` header value ## `charset` a charset",107,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[10,"to_string","","Allocates a string buffer containing the contents of `self`. ## `options` a `FormatOptions` or `None`",107,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"string"}}],[10,"write_to_stream","","Write the contents of the MIME object to `stream`. ## `options` a `FormatOptions` or `None` ## `stream` stream",107,{"inputs":[{"name":"self"},{"name":"p"},{"name":"q"}],"output":{"name":"isize"}}],[8,"ParamExt","","Trait containing all `Param` methods.",null,null],[10,"get_charset","","Gets the charset used for encoding the parameter.",108,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_encoding_method","","Gets the encoding method used for encoding the parameter.",108,{"inputs":[{"name":"self"}],"output":{"name":"paramencodingmethod"}}],[10,"get_lang","","Gets the language specifier used for encoding the parameter.",108,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_name","","Gets the name of the parameter.",108,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_value","","Gets the value of the parameter.",108,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_charset","","Sets the parameter charset used for encoding the value. ## `charset` the charset or `None` to use the default",108,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_encoding_method","","Sets the encoding method used for encoding the value. ## `method` a `ParamEncodingMethod`",108,{"inputs":[{"name":"self"},{"name":"paramencodingmethod"}],"output":null}],[10,"set_lang","","Sets the parameter language specifier used for encoding the value. ## `lang` the language specifier",108,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_value","","Sets the parameter value to `value`. ## `value` the new parameter value",108,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"ParamListExt","","Trait containing all `ParamList` methods.",null,null],[10,"clear","","Clears the list of parameters.",109,{"inputs":[{"name":"self"}],"output":null}],[10,"get_parameter","","Gets the `Param` with the given `name`. ## `name` the name of the parameter",109,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["param"],"name":"option"}}],[10,"get_parameter_at","","Gets the `Param` at the specified `index`. ## `index` the index of the requested parameter",109,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["param"],"name":"option"}}],[10,"length","","Gets the length of the list.",109,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"remove","","Removes a parameter from the `ParamList`. ## `name` the name of the parameter",109,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"remove_at","","Removes a `Param` from the `ParamList` at the specified index. ## `index` index of the param to remove",109,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"set_parameter","","Sets the specified parameter to `value`. ## `name` The name of the parameter ## `value` The parameter value",109,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[8,"ParserExt","","Trait containing all `Parser` methods.",null,null],[10,"construct_message","","Constructs a MIME message from `self`. ## `options` a `ParserOptions` or `None`",110,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["message"],"name":"option"}}],[10,"construct_part","","Constructs a MIME part from `self`. ## `options` a `ParserOptions` or `None`",110,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["object"],"name":"option"}}],[10,"eos","","Tests the end-of-stream indicator for `self`'s internal stream.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_format","","Gets the format that the parser is set to parse.",110,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[10,"get_headers_begin","","Gets the stream offset of the beginning of the headers of the most recently parsed message.",110,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_headers_end","","Gets the stream offset of the end of the headers of the most recently parsed message.",110,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_mbox_marker","","Gets the mbox-style From-line of the most recently parsed message (gotten from `ParserExt::construct_message`).",110,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_mbox_marker_offset","","Gets the offset of the most recently parsed mbox-style From-line (gotten from `ParserExt::construct_message`).",110,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"get_persist_stream","","Gets whether or not the underlying stream is persistent.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_respect_content_length","","Gets whether or not `self` is set to use Content-Length for determining the offset of the end of the message.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"init_with_stream","","Initializes `self` to use `stream`.",110,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_format","","Sets the format that the parser should expect the stream to be in. ## `format` a `Format`",110,{"inputs":[{"name":"self"},{"name":"format"}],"output":null}],[10,"set_persist_stream","","Sets whether or not the `self`'s underlying stream is persistent.",110,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"set_respect_content_length","","Sets whether or not `self` should respect Content-Length headers when deciding where to look for the start of the next message. Only used when the parser is also set to scan for From-lines.",110,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"tell","","Gets the current stream offset from the parser's internal stream.",110,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[8,"PartExt","","Trait containing all `Part` methods.",null,null],[10,"get_best_content_encoding","","Calculates the most efficient content encoding for the `self` given the `constraint`. ## `constraint` a `EncodingConstraint`",111,{"inputs":[{"name":"self"},{"name":"encodingconstraint"}],"output":{"name":"contentencoding"}}],[10,"get_content","","Gets the internal data-wrapper of the specified mime part, or `None` on error.",111,{"inputs":[{"name":"self"}],"output":{"generics":["datawrapper"],"name":"option"}}],[10,"get_content_description","","Gets the value of the Content-Description for the specified mime part if it exists or `None` otherwise.",111,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_content_encoding","","Gets the content encoding of the mime part.",111,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[10,"get_content_location","","Gets the value of the Content-Location header if it exists, or `None` otherwise.",111,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_content_md5","","Gets the md5sum contained in the Content-Md5 header of the specified mime part if it exists, or `None` otherwise.",111,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_filename","","Gets the filename of the specificed mime part, or `None` if the `self` does not have the filename or name parameter set.",111,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_openpgp_data","","Gets whether or not (and what type) of OpenPGP data is contained within the `Part`.",111,{"inputs":[{"name":"self"}],"output":{"name":"openpgpdata"}}],[10,"is_attachment","","Determines whether or not the part is an attachment based on the value of the Content-Disposition header.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"openpgp_decrypt","","Decrypts the content of the `self` and then replaces the content with the new, decrypted, content. ## `flags` a set of `DecryptFlags` ## `session_key` the session key to use or `None`",111,{"inputs":[{"name":"self"},{"name":"decryptflags"},{"name":"p"}],"output":{"generics":["option","error"],"name":"result"}}],[10,"openpgp_sign","","Signs the content of the `self` and then replaces the content with the new, signed, content. ## `userid` the key id (or email address) to use for signing",111,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"openpgp_verify","","Verifies the OpenPGP signature of the `self` and then replaces the content with the original, raw, content. ## `flags` a set of `VerifyFlags`",111,{"inputs":[{"name":"self"},{"name":"verifyflags"}],"output":{"generics":["option","error"],"name":"result"}}],[10,"set_content","","Sets the content on the mime part. ## `content` a `DataWrapper` content object",111,{"inputs":[{"name":"self"},{"name":"datawrapper"}],"output":null}],[10,"set_content_description","","Set the content description for the specified mime part. ## `description` content description",111,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_content_encoding","","Set the content encoding for the specified mime part. ## `encoding` a `ContentEncoding`",111,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":null}],[10,"set_content_location","","Set the content location for the specified mime part. ## `content_location` content location",111,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_content_md5","","Set the content md5 for the specified mime part. ## `content_md5` content md5 or `None` to generate the md5 digest.",111,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_filename","","Sets the \"filename\" parameter on the Content-Disposition and also sets the \"name\" parameter on the Content-Type.",111,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_openpgp_data","","Sets whether or not (and what type) of OpenPGP data is contained within the `Part`. ## `data` a `OpenPGPData`",111,{"inputs":[{"name":"self"},{"name":"openpgpdata"}],"output":null}],[10,"verify_content_md5","","Verify the content md5 for the specified mime part.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"SignatureExt","","Trait containing all `Signature` methods.",null,null],[10,"get_certificate","","Get the signature's certificate.",112,{"inputs":[{"name":"self"}],"output":{"generics":["certificate"],"name":"option"}}],[10,"get_created","","Get the creation date of the signature.",112,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[10,"get_expires","","Get the expiration date of the signature.",112,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[10,"get_status","","Get the signature status as a bitfield of `SignatureStatus` flags.",112,{"inputs":[{"name":"self"}],"output":{"name":"signaturestatus"}}],[10,"set_certificate","","Set the signature's certificate. ## `cert` a `Certificate`",112,{"inputs":[{"name":"self"},{"name":"certificate"}],"output":null}],[10,"set_created","","Set the creation date of the signature. ## `created` creation date",112,{"inputs":[{"name":"self"},{"name":"c_long"}],"output":null}],[10,"set_expires","","Set the expiration date of the signature. ## `expires` expiration date",112,{"inputs":[{"name":"self"},{"name":"c_long"}],"output":null}],[10,"set_status","","Set the status on the signature. ## `status` a `SignatureStatus`",112,{"inputs":[{"name":"self"},{"name":"signaturestatus"}],"output":null}],[8,"SignatureListExt","","Trait containing all `SignatureList` methods.",null,null],[10,"add","","Adds a `Signature` to the `SignatureList`. ## `sig` a `Signature`",113,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"i32"}}],[10,"clear","","Clears the list of addresses.",113,{"inputs":[{"name":"self"}],"output":null}],[10,"contains","","Checks whether or not the specified `Signature` is contained within the `SignatureList`. ## `sig` a `Signature`",113,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[10,"get_signature","","Gets the `Signature` at the specified index. ## `index` index of `Signature` to get",113,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["signature"],"name":"option"}}],[10,"index_of","","Gets the index of the specified `Signature` inside the `SignatureList`. ## `sig` a `Signature`",113,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"i32"}}],[10,"insert","","Inserts a `Signature` into the `SignatureList` at the specified index. ## `index` index to insert at ## `sig` a `Signature`",113,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"signature"}],"output":null}],[10,"length","","Gets the length of the list.",113,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"remove","","Removes a `Signature` from the `SignatureList`. ## `sig` a `Signature`",113,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[10,"remove_at","","Removes a `Signature` from the `SignatureList` at the specified index. ## `index` index to remove",113,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[10,"set_signature","","Sets the `Signature` at the specified index to `sig`. ## `index` index of `Signature` to set ## `sig` a `Signature`",113,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"signature"}],"output":null}],[8,"StreamExt","","Trait containing all `Stream` methods.",null,null],[10,"buffer_gets","","Reads in at most one less than `max` characters from `self` and stores them into the buffer pointed to by `buf`. Reading stops after an EOS or newline ('\\n'). If a newline is read, it is stored into the buffer. A '\\0' is stored after the last character in the buffer. ## `buf` line buffer ## `max` max length of a line",114,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"isize"}}],[10,"close","","Closes the stream.",114,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"construct","","Initializes a new stream with bounds `start` and `end`. ## `start` start boundary ## `end` end boundary",114,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"}],"output":null}],[10,"eos","","Tests the end-of-stream indicator for `self`.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"flush","","Sync's the stream to disk.",114,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"length","","Gets the length of the stream.",114,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"read","","Attempts to read up to `len` bytes from `self` into `buf`. ## `buf` buffer ## `len` buffer length",114,null],[10,"reset","","Resets the stream.",114,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"seek","","Repositions the offset of the stream `self` to the argument `offset` according to the directive `whence` as follows:",114,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"seekwhence"}],"output":{"name":"i64"}}],[10,"set_bounds","","Set the bounds on a stream. ## `start` start boundary ## `end` end boundary",114,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"}],"output":null}],[10,"substream","","Creates a new substream of `self` with bounds `start` and `end`. ## `start` start boundary ## `end` end boundary",114,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"i64"}],"output":{"generics":["stream"],"name":"option"}}],[10,"tell","","Gets the current offset within the stream.",114,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"write","","Attempts to write up to `len` bytes of `buf` to `self`. ## `buf` buffer ## `len` buffer length",114,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"isize"}}],[10,"write_string","","Writes `string` to `self`. ## `str` string to write",114,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"isize"}}],[10,"write_to_stream","","Attempts to write the source stream to the destination stream. ## `dest` destination stream",114,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i64"}}],[8,"StreamCatExt","","Trait containing all `StreamCat` methods.",null,null],[10,"add_source","","Adds the `source` stream to the `self`. ## `source` a source stream",115,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[8,"StreamFileExt","","Trait containing all `StreamFile` methods.",null,null],[10,"get_owner","","Gets whether or not `self` owns the backend FILE pointer.",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_owner","","Sets whether or not `self` owns the backend FILE pointer.",116,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[8,"StreamFilterExt","","Trait containing all `StreamFilter` methods.",null,null],[10,"add","","Adds `filter` to `self`. Filters are applied in the same order in which they are added. ## `filter` a `Filter`",117,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"i32"}}],[10,"get_owner","","Gets whether or not `self` owns the source stream.",117,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"remove","","Removed a filter from the stream based on the id (as returned from filter_add). ## `id` filter id",117,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[10,"set_owner","","Sets whether or not `self` owns the source stream..",117,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[8,"StreamFsExt","","Trait containing all `StreamFs` methods.",null,null],[10,"get_owner","","Gets whether or not `self` owns the backend file descriptor.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_owner","","Sets whether or not `self` owns the backend file descriptor.",118,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[8,"StreamGIOExt","","Trait containing all `StreamGIO` methods.",null,null],[10,"get_owner","","Gets whether or not `self` owns the backend `gio::File`.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_owner","","Sets whether or not `self` owns the backend GIO pointer.",119,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[8,"StreamMemExt","","Trait containing all `StreamMem` methods.",null,null],[10,"get_owner","","Gets whether or not `self` owns the backend memory buffer.",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_owner","","Sets whether or not `self` owns the backend memory buffer.",120,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[8,"StreamMmapExt","","Trait containing all `StreamMmap` methods.",null,null],[8,"StreamNullExt","","Trait containing all `StreamNull` methods.",null,null],[10,"get_count_newlines","","Gets whether or not the stream should keep track of the number of newlines encountered.",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_count_newlines","","Sets whether or not the stream should keep track of the number of newlines encountered. ## `count` `true` if newlines should be counted or `false` otherwise",121,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[8,"StreamPipeExt","","Trait containing all `StreamPipe` methods.",null,null],[10,"get_owner","","Gets whether or not `self` owns the backend pipe descriptor.",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"set_owner","","Sets whether or not `self` owns the backend pipe descriptor.",122,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[8,"TextPartExt","","Trait containing all `TextPart` methods.",null,null],[10,"get_charset","","Gets the value of the charset parameter on the Content-Type header.",123,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_text","","Gets the text content of the `self` as a string.",123,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"set_charset","","Sets the charset parameter on the Content-Type header to the specified value. ## `charset` the name of the charset",123,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_text","","Sets the specified text as the content and updates the charset parameter on the Content-Type header. ## `text` the text in utf-8",123,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[8,"MessageExt","","Trait containing all `Message` methods.",null,null],[10,"add_mailbox","","Add a mailbox of a chosen type to the MIME message.",124,{"inputs":[{"name":"self"},{"name":"addresstype"},{"name":"str"},{"name":"str"}],"output":null}],[10,"get_addresses","","Gets a list of addresses of the specified `type_` from the `self`. ## `type_` A `AddressType`",124,{"inputs":[{"name":"self"},{"name":"addresstype"}],"output":{"generics":["internetaddresslist"],"name":"option"}}],[10,"get_all_recipients","","Gets the complete list of recipients for `self`.",124,{"inputs":[{"name":"self"}],"output":{"generics":["internetaddresslist"],"name":"option"}}],[10,"get_autocrypt_gossip_headers","","Creates a new `AutocryptHeaderList` of relevant headers of the given type based on the recipient(s) of an e-mail message.",124,{"inputs":[{"name":"self"},{"name":"datetime"},{"name":"decryptflags"},{"name":"str"}],"output":{"generics":["autocryptheaderlist","error"],"name":"result"}}],[10,"get_autocrypt_gossip_headers_from_inner_part","","Creates a new `AutocryptHeaderList` of relevant headers of the given type based on the recipient(s) of an e-mail message.",124,{"inputs":[{"name":"self"},{"name":"datetime"},{"name":"p"}],"output":{"generics":["autocryptheaderlist"],"name":"option"}}],[10,"get_autocrypt_header","","Creates a new `AutocryptHeader` base on the relevant Autocrypt header associated with the sender of an e-mail message.",124,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"generics":["autocryptheader"],"name":"option"}}],[10,"get_bcc","","Gets combined list of parsed addresses in the Bcc header(s).",124,{"inputs":[{"name":"self"}],"output":{"generics":["internetaddresslist"],"name":"option"}}],[10,"get_body","","Attempts to identify the MIME part containing the body of the message.",124,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_cc","","Gets combined list of parsed addresses in the Cc header(s).",124,{"inputs":[{"name":"self"}],"output":{"generics":["internetaddresslist"],"name":"option"}}],[10,"get_date","","Gets the parsed date and time value from the Date header.",124,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[10,"get_from","","Gets the parsed list of addresses in the From header.",124,{"inputs":[{"name":"self"}],"output":{"generics":["internetaddresslist"],"name":"option"}}],[10,"get_message_id","","Gets the Message-Id header of `self`.",124,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_mime_part","","Gets the toplevel MIME part contained within `self`.",124,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[10,"get_reply_to","","Gets the parsed list of addresses in the Reply-To header.",124,{"inputs":[{"name":"self"}],"output":{"generics":["internetaddresslist"],"name":"option"}}],[10,"get_sender","","Gets the parsed list of addresses in the Sender header.",124,{"inputs":[{"name":"self"}],"output":{"generics":["internetaddresslist"],"name":"option"}}],[10,"get_subject","","Gets the subject of the `self`.",124,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_to","","Gets combined list of parsed addresses in the To header(s).",124,{"inputs":[{"name":"self"}],"output":{"generics":["internetaddresslist"],"name":"option"}}],[10,"split","","",124,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["message"],"name":"vec"}}],[10,"set_date","","Sets the Date header on a MIME Message. ## `date` a date to be used in the Date header",124,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":null}],[10,"set_message_id","","Set the Message-Id on a message. ## `message_id` message-id (addr-spec portion)",124,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"set_mime_part","","Set the root-level MIME part of the message. ## `mime_part` The root-level MIME Part",124,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"set_subject","","Set the subject of a `self`.",124,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[8,"MessagePartialExt","","Trait containing all `MessagePartial` methods.",null,null],[10,"get_id","","Gets the message/partial id parameter value.",125,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_number","","Gets the message/partial part number.",125,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"get_total","","Gets the total number of message/partial parts needed to reconstruct the original message.",125,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_static","","Creates a view into static `data` without copying.",126,null],[11,"from_owned","","Takes ownership of `data` and creates a new `Bytes` without copying.",126,{"inputs":[{"name":"t"}],"output":{"name":"bytes"}}],[11,"hash","","",127,null],[11,"hash","","",1,null],[11,"hash","","",0,null],[11,"hash","","",126,null],[11,"hash","","",128,null],[11,"hash","","",129,null],[11,"bitand","","Returns the intersection between the two sets of flags.",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"iocondition"}}],[11,"set_value","","",129,null],[11,"from_value_optional","","",129,{"inputs":[{"name":"value"}],"output":{"generics":["iocondition"],"name":"option"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into","","",128,{"inputs":[{"name":"self"}],"output":{"generics":["variantty"],"name":"cow"}}],[11,"to_glib","","",130,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"variantty"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"checksumtype"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"checksumtype"}],"output":{"name":"bool"}}],[11,"eq","","",126,null],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"priority"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"self"},{"name":"priority"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"seektype"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"seektype"}],"output":{"name":"bool"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",126,null],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"varianttype"}],"output":{"name":"bool"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"variantty"}],"output":{"name":"bool"}}],[11,"extend","","",129,null],[11,"drop","","",128,null],[11,"not","","Returns the complement of this set of flags.",129,{"inputs":[{"name":"self"}],"output":{"name":"iocondition"}}],[11,"cmp","","",126,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"cmp","","",131,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"cmp","","",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"ordering"}}],[11,"borrow","","",128,{"inputs":[{"name":"self"}],"output":{"name":"variantty"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"iocondition"}}],[11,"partial_cmp","","",126,null],[11,"partial_cmp","","",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"le","","",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"gt","","",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"ge","","",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",126,null],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",131,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"varianttype"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"priority"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"iocondition"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"seektype"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"checksumtype"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"sub","","Returns the set difference of the two sets of flags.",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"iocondition"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_iter","","",129,{"inputs":[{"name":"t"}],"output":{"name":"iocondition"}}],[11,"from","","",127,{"inputs":[{"name":"t"}],"output":{"name":"variant"}}],[11,"from","","",126,{"inputs":[{"name":"t"}],"output":{"name":"bytes"}}],[11,"sub_assign","","Disables all flags enabled in the set.",129,null],[11,"from_value","","",129,{"inputs":[{"name":"value"}],"output":{"name":"iocondition"}}],[11,"bitor","","Returns the union of the two sets of flags.",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"iocondition"}}],[11,"description","","",133,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",129,null],[11,"bitor_assign","","Adds the set of flags.",129,null],[11,"default","","",130,{"inputs":[],"output":{"name":"priority"}}],[11,"bitxor_assign","","Toggles the set of flags.",129,null],[11,"static_type","","",126,{"inputs":[],"output":{"name":"type"}}],[11,"static_type","","",131,{"inputs":[],"output":{"name":"type"}}],[11,"static_type","","",129,{"inputs":[],"output":{"name":"type"}}],[11,"static_type","","",132,{"inputs":[],"output":{"name":"type"}}],[11,"static_type","","",127,{"inputs":[],"output":{"name":"type"}}],[11,"static_type","","",133,{"inputs":[],"output":{"name":"type"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",128,{"inputs":[{"name":"self"}],"output":{"name":"variantty"}}],[11,"deref","","",126,null],[11,"from_glib","","",130,{"inputs":[{"name":"i32"}],"output":{"name":"priority"}}],[11,"hash","","",134,null],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"static_type","","",134,{"inputs":[],"output":{"name":"type"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates an error with supplied error enum variant and message.",133,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"error"}}],[11,"is","","Checks if the error domain matches `T`.",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Tries to convert to a specific error enum.",133,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"wrap","","",133,null],[11,"type_","","Returns the type of the value.",127,{"inputs":[{"name":"self"}],"output":{"name":"variantty"}}],[11,"is","","Returns `true` if the type of the value corresponds to `T`.",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Tries to extract a value of type `T`.",127,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_str","","Tries to extract a `&str`.",127,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"new","","Tries to create a `VariantType` from a string slice.",128,{"inputs":[{"name":"str"}],"output":{"generics":["varianttype"],"name":"result"}}],[18,"IN","","",129,null],[18,"OUT","","",129,null],[18,"PRI","","",129,null],[18,"ERR","","",129,null],[18,"HUP","","",129,null],[18,"NVAL","","",129,null],[11,"empty","","Returns an empty set of flags.",129,{"inputs":[],"output":{"name":"iocondition"}}],[11,"all","","Returns the set containing all flags.",129,{"inputs":[],"output":{"name":"iocondition"}}],[11,"bits","","Returns the raw value of the flags currently stored.",129,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",129,{"inputs":[{"name":"u32"}],"output":{"generics":["iocondition"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",129,{"inputs":[{"name":"u32"}],"output":{"name":"iocondition"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",129,{"inputs":[{"name":"self"},{"name":"iocondition"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",129,null],[11,"remove","","Removes the specified flags in-place.",129,null],[11,"toggle","","Toggles the specified flags in-place.",129,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",129,null],[11,"add_child_source","","",132,null],[11,"attach","","",132,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"u32"}}],[11,"destroy","","",132,null],[11,"get_can_recurse","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_context","","",132,{"inputs":[{"name":"self"}],"output":{"generics":["maincontext"],"name":"option"}}],[11,"get_id","","",132,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_name","","",132,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_priority","","",132,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_ready_time","","",132,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_time","","",132,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_destroyed","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove_child_source","","",132,null],[11,"remove","","",132,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[11,"new","","",131,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"name":"datetime"}}],[11,"new_from_unix_local","","",131,{"inputs":[{"name":"i64"}],"output":{"name":"datetime"}}],[11,"new_from_unix_utc","","",131,{"inputs":[{"name":"i64"}],"output":{"name":"datetime"}}],[11,"new_local","","",131,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"name":"datetime"}}],[11,"new_now","","",131,{"inputs":[{"name":"timezone"}],"output":{"name":"datetime"}}],[11,"new_now_local","","",131,{"inputs":[],"output":{"name":"datetime"}}],[11,"new_now_utc","","",131,{"inputs":[],"output":{"name":"datetime"}}],[11,"new_utc","","",131,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"name":"datetime"}}],[11,"add","","",131,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_days","","",131,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_full","","",131,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_hours","","",131,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_minutes","","",131,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_months","","",131,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_seconds","","",131,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_weeks","","",131,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"add_years","","",131,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"difference","","",131,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"i64"}}],[11,"format","","",131,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_day_of_month","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_day_of_week","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_day_of_year","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_hour","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_microsecond","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_minute","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_month","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_second","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_seconds","","",131,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_timezone_abbreviation","","",131,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_utc_offset","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_week_numbering_year","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_week_of_year","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_year","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_ymd","","",131,null],[11,"is_daylight_savings","","",131,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_local","","",131,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"to_timezone","","",131,{"inputs":[{"name":"self"},{"name":"timezone"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"to_unix","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"to_utc","","",131,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"compare","","",131,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"i32"}}],[11,"equal","","",131,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"new_for_commandline_arg","","",134,{"inputs":[{"name":"str"}],"output":{"name":"file"}}],[11,"new_for_path","","",134,{"inputs":[{"name":"p"}],"output":{"name":"file"}}],[11,"new_for_uri","","",134,{"inputs":[{"name":"str"}],"output":{"name":"file"}}],[11,"new_tmp","","",134,{"inputs":[{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[11,"parse_name","","",134,{"inputs":[{"name":"str"}],"output":{"generics":["file"],"name":"option"}}]],"paths":[[4,"SeekType"],[4,"ChecksumType"],[4,"AddressType"],[4,"AutocryptPreferEncrypt"],[4,"EncryptFlags"],[4,"FilterFromMode"],[4,"FilterGZipMode"],[4,"Format"],[4,"NewLineFormat"],[4,"OpenPGPData"],[4,"ParamEncodingMethod"],[4,"PubKeyAlgo"],[4,"RfcComplianceMode"],[4,"SecureMimeType"],[4,"SeekWhence"],[4,"SignatureStatus"],[4,"StreamBufferMode"],[4,"Trust"],[4,"Validity"],[4,"VerifyFlags"],[4,"DigestAlgo"],[4,"ContentEncoding"],[4,"EncodingConstraint"],[3,"ApplicationPkcs7Mime"],[3,"AutocryptHeader"],[3,"AutocryptHeaderList"],[3,"Certificate"],[3,"CertificateList"],[3,"ContentDisposition"],[3,"ContentType"],[3,"CryptoContext"],[3,"DataWrapper"],[3,"DecryptResult"],[3,"Filter"],[3,"FilterBasic"],[3,"FilterBest"],[3,"FilterCharset"],[3,"FilterDos2Unix"],[3,"FilterEnriched"],[3,"FilterFrom"],[3,"FilterGZip"],[3,"FilterHTML"],[3,"FilterSmtpData"],[3,"FilterStrip"],[3,"FilterUnix2Dos"],[3,"FilterWindows"],[3,"FilterYenc"],[3,"GpgContext"],[3,"Header"],[3,"HeaderList"],[3,"InternetAddress"],[3,"InternetAddressList"],[3,"InternetAddressMailbox"],[3,"MessagePart"],[3,"Multipart"],[3,"MultipartEncrypted"],[3,"MultipartSigned"],[3,"Object"],[3,"Param"],[3,"ParamList"],[3,"Parser"],[3,"Part"],[3,"Pkcs7Context"],[3,"Signature"],[3,"SignatureList"],[3,"Stream"],[3,"StreamBuffer"],[3,"StreamCat"],[3,"StreamFile"],[3,"StreamFilter"],[3,"StreamFs"],[3,"StreamGIO"],[3,"StreamMem"],[3,"StreamMmap"],[3,"StreamNull"],[3,"StreamPipe"],[3,"TextPart"],[3,"FormatOptions"],[3,"PartIter"],[3,"DecryptFlags"],[3,"FilterBestFlags"],[3,"Message"],[3,"MessagePartial"],[3,"ParserOptions"],[8,"ApplicationPkcs7MimeExt"],[8,"AutocryptHeaderExt"],[8,"AutocryptHeaderListExt"],[8,"CertificateExt"],[8,"CertificateListExt"],[8,"ContentDispositionExt"],[8,"ContentTypeExt"],[8,"CryptoContextExt"],[8,"DataWrapperExt"],[8,"DecryptResultExt"],[8,"FilterExt"],[8,"FilterBestExt"],[8,"FilterWindowsExt"],[8,"FilterYencExt"],[8,"HeaderExt"],[8,"HeaderListExt"],[8,"InternetAddressExt"],[8,"InternetAddressListExt"],[8,"InternetAddressMailboxExt"],[8,"MessagePartExt"],[8,"MultipartExt"],[8,"MultipartEncryptedExt"],[8,"MultipartSignedExt"],[8,"ObjectExt"],[8,"ParamExt"],[8,"ParamListExt"],[8,"ParserExt"],[8,"PartExt"],[8,"SignatureExt"],[8,"SignatureListExt"],[8,"StreamExt"],[8,"StreamCatExt"],[8,"StreamFileExt"],[8,"StreamFilterExt"],[8,"StreamFsExt"],[8,"StreamGIOExt"],[8,"StreamMemExt"],[8,"StreamNullExt"],[8,"StreamPipeExt"],[8,"TextPartExt"],[8,"MessageExt"],[8,"MessagePartialExt"],[3,"Bytes"],[3,"Variant"],[3,"VariantType"],[3,"IOCondition"],[3,"Priority"],[3,"DateTime"],[3,"Source"],[3,"Error"],[3,"File"]]};
searchIndex["gmime_sys"] = {"doc":"","items":[[3,"GMimeDecryptFlags","gmime_sys","",null,null],[3,"GMimeFilterBestFlags","","",null,null],[3,"GMimeOpenPGPState","","",null,null],[3,"GMimeApplicationPkcs7MimeClass","","",null,null],[12,"parent_class","","",0,null],[3,"GMimeAutocryptHeaderClass","","",null,null],[12,"parent_class","","",1,null],[3,"GMimeAutocryptHeaderListClass","","",null,null],[12,"parent_class","","",2,null],[3,"GMimeCertificateClass","","",null,null],[12,"parent_class","","",3,null],[3,"GMimeCertificateListClass","","",null,null],[12,"parent_class","","",4,null],[3,"GMimeCharset","","",null,null],[12,"mask","","",5,null],[12,"level","","",5,null],[3,"GMimeContentDispositionClass","","",null,null],[12,"parent_class","","",6,null],[3,"GMimeContentTypeClass","","",null,null],[12,"parent_class","","",7,null],[3,"GMimeCryptoContextClass","","",null,null],[12,"parent_class","","",8,null],[12,"digest_id","","",8,null],[12,"digest_name","","",8,null],[12,"get_signature_protocol","","",8,null],[12,"get_encryption_protocol","","",8,null],[12,"get_key_exchange_protocol","","",8,null],[12,"sign","","",8,null],[12,"verify","","",8,null],[12,"encrypt","","",8,null],[12,"decrypt","","",8,null],[12,"import_keys","","",8,null],[12,"export_keys","","",8,null],[3,"GMimeDataWrapperClass","","",null,null],[12,"parent_class","","",9,null],[12,"write_to_stream","","",9,null],[3,"GMimeDecryptResultClass","","",null,null],[12,"parent_class","","",10,null],[3,"GMimeEncoding","","",null,null],[12,"encoding","","",11,null],[12,"uubuf","","",11,null],[12,"encode","","",11,null],[12,"save","","",11,null],[12,"state","","",11,null],[3,"GMimeFilterBasicClass","","",null,null],[12,"parent_class","","",12,null],[3,"GMimeFilterBestClass","","",null,null],[12,"parent_class","","",13,null],[3,"GMimeFilterCharsetClass","","",null,null],[12,"parent_class","","",14,null],[3,"GMimeFilterChecksumClass","","",null,null],[12,"parent_class","","",15,null],[3,"GMimeFilterClass","","",null,null],[12,"parent_class","","",16,null],[12,"copy","","",16,null],[12,"filter","","",16,null],[12,"complete","","",16,null],[12,"reset","","",16,null],[3,"GMimeFilterDos2UnixClass","","",null,null],[12,"parent_class","","",17,null],[3,"GMimeFilterEnrichedClass","","",null,null],[12,"parent_class","","",18,null],[3,"GMimeFilterFromClass","","",null,null],[12,"parent_class","","",19,null],[3,"GMimeFilterGZipClass","","",null,null],[12,"parent_class","","",20,null],[3,"GMimeFilterHTMLClass","","",null,null],[12,"parent_class","","",21,null],[3,"GMimeFilterOpenPGPClass","","",null,null],[12,"parent_class","","",22,null],[3,"GMimeFilterSmtpDataClass","","",null,null],[12,"parent_class","","",23,null],[3,"GMimeFilterStripClass","","",null,null],[12,"parent_class","","",24,null],[3,"GMimeFilterUnix2DosClass","","",null,null],[12,"parent_class","","",25,null],[3,"GMimeFilterWindowsClass","","",null,null],[12,"parent_class","","",26,null],[3,"GMimeFilterYencClass","","",null,null],[12,"parent_class","","",27,null],[3,"GMimeFormatOptions","","",null,null],[3,"GMimeGpgContextClass","","",null,null],[3,"GMimeHeaderClass","","",null,null],[12,"parent_class","","",28,null],[3,"GMimeHeaderListClass","","",null,null],[12,"parent_class","","",29,null],[3,"GMimeMessageClass","","",null,null],[12,"parent_class","","",30,null],[3,"GMimeMessagePartClass","","",null,null],[12,"parent_class","","",31,null],[3,"GMimeMessagePartialClass","","",null,null],[12,"parent_class","","",32,null],[3,"GMimeMultipartClass","","",null,null],[12,"parent_class","","",33,null],[12,"clear","","",33,null],[12,"add","","",33,null],[12,"insert","","",33,null],[12,"remove","","",33,null],[12,"remove_at","","",33,null],[12,"get_part","","",33,null],[12,"contains","","",33,null],[12,"index_of","","",33,null],[12,"get_count","","",33,null],[12,"set_boundary","","",33,null],[12,"get_boundary","","",33,null],[3,"GMimeMultipartEncryptedClass","","",null,null],[12,"parent_class","","",34,null],[3,"GMimeMultipartSignedClass","","",null,null],[12,"parent_class","","",35,null],[3,"GMimeObjectClass","","",null,null],[12,"parent_class","","",36,null],[12,"header_added","","",36,null],[12,"header_changed","","",36,null],[12,"header_removed","","",36,null],[12,"headers_cleared","","",36,null],[12,"set_content_type","","",36,null],[12,"get_headers","","",36,null],[12,"write_to_stream","","",36,null],[12,"encode","","",36,null],[3,"GMimeOpenPGPMarker","","",null,null],[12,"marker","","",37,null],[12,"len","","",37,null],[12,"before","","",37,null],[12,"after","","",37,null],[12,"is_end_marker","","",37,null],[3,"GMimeParamClass","","",null,null],[12,"parent_class","","",38,null],[3,"GMimeParamListClass","","",null,null],[12,"parent_class","","",39,null],[3,"GMimeParserClass","","",null,null],[12,"parent_class","","",40,null],[3,"GMimeParserOptions","","",null,null],[3,"GMimePartClass","","",null,null],[12,"parent_class","","",41,null],[12,"set_content","","",41,null],[3,"GMimePartIter","","",null,null],[3,"GMimePkcs7ContextClass","","",null,null],[3,"GMimeReferences","","",null,null],[12,"array","","",42,null],[3,"GMimeSignatureClass","","",null,null],[12,"parent_class","","",43,null],[3,"GMimeSignatureListClass","","",null,null],[12,"parent_class","","",44,null],[3,"GMimeStreamBufferClass","","",null,null],[12,"parent_class","","",45,null],[3,"GMimeStreamCatClass","","",null,null],[12,"parent_class","","",46,null],[3,"GMimeStreamClass","","",null,null],[12,"parent_class","","",47,null],[12,"read","","",47,null],[12,"write","","",47,null],[12,"flush","","",47,null],[12,"close","","",47,null],[12,"eos","","",47,null],[12,"reset","","",47,null],[12,"seek","","",47,null],[12,"tell","","",47,null],[12,"length","","",47,null],[12,"substream","","",47,null],[3,"GMimeStreamFileClass","","",null,null],[12,"parent_class","","",48,null],[3,"GMimeStreamFilterClass","","",null,null],[12,"parent_class","","",49,null],[3,"GMimeStreamFsClass","","",null,null],[12,"parent_class","","",50,null],[3,"GMimeStreamGIOClass","","",null,null],[12,"parent_class","","",51,null],[3,"GMimeStreamIOVector","","",null,null],[12,"data","","",52,null],[12,"len","","",52,null],[3,"GMimeStreamMemClass","","",null,null],[12,"parent_class","","",53,null],[3,"GMimeStreamMmapClass","","",null,null],[12,"parent_class","","",54,null],[3,"GMimeStreamNullClass","","",null,null],[12,"parent_class","","",55,null],[3,"GMimeStreamPipeClass","","",null,null],[12,"parent_class","","",56,null],[3,"GMimeTextPartClass","","",null,null],[12,"parent_class","","",57,null],[3,"InternetAddressClass","","",null,null],[12,"parent_class","","",58,null],[12,"to_string","","",58,null],[3,"InternetAddressGroupClass","","",null,null],[12,"parent_class","","",59,null],[3,"InternetAddressListClass","","",null,null],[12,"parent_class","","",60,null],[3,"InternetAddressMailboxClass","","",null,null],[12,"parent_class","","",61,null],[3,"GMimeApplicationPkcs7Mime","","",null,null],[12,"parent_object","","",62,null],[12,"smime_type","","",62,null],[3,"GMimeAutocryptHeader","","",null,null],[12,"parent_object","","",63,null],[12,"address","","",63,null],[12,"prefer_encrypt","","",63,null],[12,"keydata","","",63,null],[12,"effective_date","","",63,null],[3,"GMimeAutocryptHeaderList","","",null,null],[12,"parent_object","","",64,null],[12,"array","","",64,null],[3,"GMimeCertificate","","",null,null],[12,"parent_object","","",65,null],[12,"pubkey_algo","","",65,null],[12,"digest_algo","","",65,null],[12,"trust","","",65,null],[12,"issuer_serial","","",65,null],[12,"issuer_name","","",65,null],[12,"fingerprint","","",65,null],[12,"created","","",65,null],[12,"expires","","",65,null],[12,"keyid","","",65,null],[12,"email","","",65,null],[12,"name","","",65,null],[12,"user_id","","",65,null],[12,"id_validity","","",65,null],[3,"GMimeCertificateList","","",null,null],[12,"parent_object","","",66,null],[12,"array","","",66,null],[3,"GMimeContentDisposition","","",null,null],[12,"parent_object","","",67,null],[12,"disposition","","",67,null],[12,"params","","",67,null],[12,"changed","","",67,null],[3,"GMimeContentType","","",null,null],[12,"parent_object","","",68,null],[12,"type_","","",68,null],[12,"subtype","","",68,null],[12,"params","","",68,null],[12,"changed","","",68,null],[3,"GMimeCryptoContext","","",null,null],[12,"parent_object","","",69,null],[12,"request_passwd","","",69,null],[3,"GMimeDataWrapper","","",null,null],[12,"parent_object","","",70,null],[12,"encoding","","",70,null],[12,"stream","","",70,null],[3,"GMimeDecryptResult","","",null,null],[12,"parent_object","","",71,null],[12,"recipients","","",71,null],[12,"signatures","","",71,null],[12,"cipher","","",71,null],[12,"mdc","","",71,null],[12,"session_key","","",71,null],[3,"GMimeFilter","","",null,null],[12,"parent_object","","",72,null],[12,"priv_","","",72,null],[12,"outreal","","",72,null],[12,"outbuf","","",72,null],[12,"outptr","","",72,null],[12,"outsize","","",72,null],[12,"outpre","","",72,null],[12,"backbuf","","",72,null],[12,"backsize","","",72,null],[12,"backlen","","",72,null],[3,"GMimeFilterBasic","","",null,null],[12,"parent_object","","",73,null],[12,"encoder","","",73,null],[3,"GMimeFilterBest","","",null,null],[12,"parent_object","","",74,null],[12,"flags","","",74,null],[12,"charset","","",74,null],[12,"count0","","",74,null],[12,"count8","","",74,null],[12,"total","","",74,null],[12,"maxline","","",74,null],[12,"linelen","","",74,null],[12,"frombuf","","",74,null],[3,"GMimeFilterCharset","","",null,null],[12,"parent_object","","",75,null],[12,"from_charset","","",75,null],[12,"to_charset","","",75,null],[12,"cd","","",75,null],[3,"GMimeFilterChecksum","","",null,null],[12,"parent_object","","",76,null],[12,"checksum","","",76,null],[3,"GMimeFilterDos2Unix","","",null,null],[12,"parent_object","","",77,null],[12,"ensure_newline","","",77,null],[12,"pc","","",77,null],[3,"GMimeFilterEnriched","","",null,null],[12,"parent_object","","",78,null],[12,"flags","","",78,null],[12,"nofill","","",78,null],[3,"GMimeFilterFrom","","",null,null],[12,"parent_object","","",79,null],[12,"mode","","",79,null],[12,"midline","","",79,null],[3,"GMimeFilterGZip","","",null,null],[12,"parent_object","","",80,null],[12,"priv_","","",80,null],[12,"mode","","",80,null],[12,"level","","",80,null],[3,"GMimeFilterHTML","","",null,null],[12,"parent_object","","",81,null],[12,"scanner","","",81,null],[12,"flags","","",81,null],[12,"colour","","",81,null],[3,"GMimeFilterOpenPGP","","",null,null],[12,"parent_object","","",82,null],[12,"state","","",82,null],[12,"seen_end_marker","","",82,null],[12,"midline","","",82,null],[12,"begin_offset","","",82,null],[12,"end_offset","","",82,null],[12,"position","","",82,null],[12,"next","","",82,null],[3,"GMimeFilterSmtpData","","",null,null],[12,"parent_object","","",83,null],[12,"bol","","",83,null],[3,"GMimeFilterStrip","","",null,null],[12,"parent_object","","",84,null],[12,"lwsp","","",84,null],[3,"GMimeFilterUnix2Dos","","",null,null],[12,"parent_object","","",85,null],[12,"ensure_newline","","",85,null],[12,"pc","","",85,null],[3,"GMimeFilterWindows","","",null,null],[12,"parent_object","","",86,null],[12,"is_windows","","",86,null],[12,"claimed_charset","","",86,null],[3,"GMimeFilterYenc","","",null,null],[12,"parent_object","","",87,null],[12,"encode","","",87,null],[12,"part","","",87,null],[12,"state","","",87,null],[12,"pcrc","","",87,null],[12,"crc","","",87,null],[3,"GMimeGpgContext","","",null,null],[3,"GMimeHeader","","",null,null],[12,"parent_object","","",88,null],[12,"name","","",88,null],[12,"value","","",88,null],[12,"formatter","","",88,null],[12,"options","","",88,null],[12,"reformat","","",88,null],[12,"changed","","",88,null],[12,"raw_value","","",88,null],[12,"raw_name","","",88,null],[12,"charset","","",88,null],[12,"offset","","",88,null],[3,"GMimeHeaderList","","",null,null],[12,"parent_object","","",89,null],[12,"options","","",89,null],[12,"changed","","",89,null],[12,"hash","","",89,null],[12,"array","","",89,null],[3,"GMimeMessage","","",null,null],[12,"parent_object","","",90,null],[12,"addrlists","","",90,null],[12,"mime_part","","",90,null],[12,"message_id","","",90,null],[12,"date","","",90,null],[12,"subject","","",90,null],[12,"marker","","",90,null],[3,"GMimeMessagePart","","",null,null],[12,"parent_object","","",91,null],[12,"message","","",91,null],[3,"GMimeMessagePartial","","",null,null],[12,"parent_object","","",92,null],[12,"number","","",92,null],[12,"total","","",92,null],[12,"id","","",92,null],[3,"GMimeMultipart","","",null,null],[12,"parent_object","","",93,null],[12,"children","","",93,null],[12,"boundary","","",93,null],[12,"prologue","","",93,null],[12,"epilogue","","",93,null],[12,"write_end_boundary","","",93,null],[3,"GMimeMultipartEncrypted","","",null,null],[12,"parent_object","","",94,null],[3,"GMimeMultipartSigned","","",null,null],[12,"parent_object","","",95,null],[3,"GMimeObject","","",null,null],[12,"parent_object","","",96,null],[12,"disposition","","",96,null],[12,"content_type","","",96,null],[12,"headers","","",96,null],[12,"content_id","","",96,null],[12,"ensure_newline","","",96,null],[3,"GMimeParam","","",null,null],[12,"parent_object","","",97,null],[12,"method","","",97,null],[12,"charset","","",97,null],[12,"lang","","",97,null],[12,"name","","",97,null],[12,"value","","",97,null],[12,"changed","","",97,null],[3,"GMimeParamList","","",null,null],[12,"parent_object","","",98,null],[12,"array","","",98,null],[12,"changed","","",98,null],[3,"GMimeParser","","",null,null],[12,"parent_object","","",99,null],[12,"priv_","","",99,null],[3,"GMimePart","","",null,null],[12,"parent_object","","",100,null],[12,"encoding","","",100,null],[12,"openpgp","","",100,null],[12,"content_description","","",100,null],[12,"content_location","","",100,null],[12,"content_md5","","",100,null],[12,"content","","",100,null],[3,"GMimePkcs7Context","","",null,null],[3,"GMimeSignature","","",null,null],[12,"parent_object","","",101,null],[12,"status","","",101,null],[12,"cert","","",101,null],[12,"created","","",101,null],[12,"expires","","",101,null],[3,"GMimeSignatureList","","",null,null],[12,"parent_object","","",102,null],[12,"array","","",102,null],[3,"GMimeStream","","",null,null],[12,"parent_object","","",103,null],[12,"super_stream","","",103,null],[12,"position","","",103,null],[12,"bound_start","","",103,null],[12,"bound_end","","",103,null],[3,"GMimeStreamBuffer","","",null,null],[12,"parent_object","","",104,null],[12,"mode","","",104,null],[12,"source","","",104,null],[12,"buffer","","",104,null],[12,"bufptr","","",104,null],[12,"bufend","","",104,null],[12,"buflen","","",104,null],[3,"GMimeStreamCat","","",null,null],[12,"parent_object","","",105,null],[12,"sources","","",105,null],[12,"current","","",105,null],[3,"GMimeStreamFile","","",null,null],[12,"parent_object","","",106,null],[12,"owner","","",106,null],[12,"fp","","",106,null],[3,"GMimeStreamFilter","","",null,null],[12,"parent_object","","",107,null],[12,"priv_","","",107,null],[12,"source","","",107,null],[12,"owner","","",107,null],[3,"GMimeStreamFs","","",null,null],[12,"parent_object","","",108,null],[12,"owner","","",108,null],[12,"eos","","",108,null],[12,"fd","","",108,null],[3,"GMimeStreamGIO","","",null,null],[12,"parent_object","","",109,null],[12,"ostream","","",109,null],[12,"istream","","",109,null],[12,"file","","",109,null],[12,"owner","","",109,null],[12,"eos","","",109,null],[3,"GMimeStreamMem","","",null,null],[12,"parent_object","","",110,null],[12,"buffer","","",110,null],[12,"owner","","",110,null],[3,"GMimeStreamMmap","","",null,null],[12,"parent_object","","",111,null],[12,"owner","","",111,null],[12,"eos","","",111,null],[12,"fd","","",111,null],[12,"map","","",111,null],[12,"maplen","","",111,null],[3,"GMimeStreamNull","","",null,null],[12,"parent_object","","",112,null],[12,"written","","",112,null],[12,"newlines","","",112,null],[12,"count_newlines","","",112,null],[3,"GMimeStreamPipe","","",null,null],[12,"parent_object","","",113,null],[12,"owner","","",113,null],[12,"eos","","",113,null],[12,"fd","","",113,null],[3,"GMimeTextPart","","",null,null],[12,"parent_object","","",114,null],[3,"InternetAddress","","",null,null],[12,"parent_object","","",115,null],[12,"charset","","",115,null],[12,"name","","",115,null],[12,"changed","","",115,null],[3,"InternetAddressGroup","","",null,null],[12,"parent_object","","",116,null],[12,"members","","",116,null],[3,"InternetAddressList","","",null,null],[12,"parent_object","","",117,null],[12,"array","","",117,null],[12,"changed","","",117,null],[3,"InternetAddressMailbox","","",null,null],[12,"parent_object","","",118,null],[12,"idn_addr","","",118,null],[12,"addr","","",118,null],[12,"at","","",118,null],[5,"g_mime_charset_best_name","","",null,null],[5,"g_mime_charset_can_encode","","",null,null],[5,"g_mime_charset_init","","",null,null],[5,"g_mime_charset_step","","",null,null],[5,"g_mime_charset_best","","",null,null],[5,"g_mime_charset_canon_name","","",null,null],[5,"g_mime_charset_iconv_name","","",null,null],[5,"g_mime_charset_iso_to_windows","","",null,null],[5,"g_mime_charset_language","","",null,null],[5,"g_mime_charset_locale_name","","",null,null],[5,"g_mime_charset_map_init","","",null,null],[5,"g_mime_charset_map_shutdown","","",null,null],[5,"g_mime_charset_name","","",null,null],[5,"g_mime_encoding_flush","","",null,null],[5,"g_mime_encoding_init_decode","","",null,null],[5,"g_mime_encoding_init_encode","","",null,null],[5,"g_mime_encoding_outlen","","",null,null],[5,"g_mime_encoding_reset","","",null,null],[5,"g_mime_encoding_step","","",null,null],[5,"g_mime_encoding_base64_decode_step","","",null,null],[5,"g_mime_encoding_base64_encode_close","","",null,null],[5,"g_mime_encoding_base64_encode_step","","",null,null],[5,"g_mime_encoding_quoted_decode_step","","",null,null],[5,"g_mime_encoding_quoted_encode_close","","",null,null],[5,"g_mime_encoding_quoted_encode_step","","",null,null],[5,"g_mime_encoding_uudecode_step","","",null,null],[5,"g_mime_encoding_uuencode_close","","",null,null],[5,"g_mime_encoding_uuencode_step","","",null,null],[5,"g_mime_format_options_get_type","","",null,null],[5,"g_mime_format_options_new","","",null,null],[5,"g_mime_format_options_add_hidden_header","","",null,null],[5,"g_mime_format_options_clear_hidden_headers","","",null,null],[5,"g_mime_format_options_clone","","",null,null],[5,"g_mime_format_options_create_newline_filter","","",null,null],[5,"g_mime_format_options_free","","",null,null],[5,"g_mime_format_options_get_newline","","",null,null],[5,"g_mime_format_options_get_newline_format","","",null,null],[5,"g_mime_format_options_get_param_encoding_method","","",null,null],[5,"g_mime_format_options_is_hidden_header","","",null,null],[5,"g_mime_format_options_remove_hidden_header","","",null,null],[5,"g_mime_format_options_set_newline_format","","",null,null],[5,"g_mime_format_options_set_param_encoding_method","","",null,null],[5,"g_mime_format_options_get_default","","",null,null],[5,"g_mime_parser_options_get_type","","",null,null],[5,"g_mime_parser_options_new","","",null,null],[5,"g_mime_parser_options_clone","","",null,null],[5,"g_mime_parser_options_free","","",null,null],[5,"g_mime_parser_options_get_address_compliance_mode","","",null,null],[5,"g_mime_parser_options_get_allow_addresses_without_domain","","",null,null],[5,"g_mime_parser_options_get_fallback_charsets","","",null,null],[5,"g_mime_parser_options_get_parameter_compliance_mode","","",null,null],[5,"g_mime_parser_options_get_rfc2047_compliance_mode","","",null,null],[5,"g_mime_parser_options_get_warning_callback","","",null,null],[5,"g_mime_parser_options_set_address_compliance_mode","","",null,null],[5,"g_mime_parser_options_set_allow_addresses_without_domain","","",null,null],[5,"g_mime_parser_options_set_fallback_charsets","","",null,null],[5,"g_mime_parser_options_set_parameter_compliance_mode","","",null,null],[5,"g_mime_parser_options_set_rfc2047_compliance_mode","","",null,null],[5,"g_mime_parser_options_set_warning_callback","","",null,null],[5,"g_mime_parser_options_get_default","","",null,null],[5,"g_mime_part_iter_get_type","","",null,null],[5,"g_mime_part_iter_new","","",null,null],[5,"g_mime_part_iter_clone","","",null,null],[5,"g_mime_part_iter_free","","",null,null],[5,"g_mime_part_iter_get_current","","",null,null],[5,"g_mime_part_iter_get_parent","","",null,null],[5,"g_mime_part_iter_get_path","","",null,null],[5,"g_mime_part_iter_get_toplevel","","",null,null],[5,"g_mime_part_iter_is_valid","","",null,null],[5,"g_mime_part_iter_jump_to","","",null,null],[5,"g_mime_part_iter_next","","",null,null],[5,"g_mime_part_iter_prev","","",null,null],[5,"g_mime_part_iter_remove","","",null,null],[5,"g_mime_part_iter_replace","","",null,null],[5,"g_mime_part_iter_reset","","",null,null],[5,"g_mime_references_get_type","","",null,null],[5,"g_mime_references_new","","",null,null],[5,"g_mime_references_append","","",null,null],[5,"g_mime_references_clear","","",null,null],[5,"g_mime_references_copy","","",null,null],[5,"g_mime_references_free","","",null,null],[5,"g_mime_references_get_message_id","","",null,null],[5,"g_mime_references_length","","",null,null],[5,"g_mime_references_set_message_id","","",null,null],[5,"g_mime_references_parse","","",null,null],[5,"g_mime_application_pkcs7_mime_get_type","","",null,null],[5,"g_mime_application_pkcs7_mime_new","","",null,null],[5,"g_mime_application_pkcs7_mime_encrypt","","",null,null],[5,"g_mime_application_pkcs7_mime_sign","","",null,null],[5,"g_mime_application_pkcs7_mime_decrypt","","",null,null],[5,"g_mime_application_pkcs7_mime_get_smime_type","","",null,null],[5,"g_mime_application_pkcs7_mime_verify","","",null,null],[5,"g_mime_autocrypt_header_get_type","","",null,null],[5,"g_mime_autocrypt_header_new","","",null,null],[5,"g_mime_autocrypt_header_new_from_string","","",null,null],[5,"g_mime_autocrypt_header_clone","","",null,null],[5,"g_mime_autocrypt_header_compare","","",null,null],[5,"g_mime_autocrypt_header_get_address","","",null,null],[5,"g_mime_autocrypt_header_get_address_as_string","","",null,null],[5,"g_mime_autocrypt_header_get_effective_date","","",null,null],[5,"g_mime_autocrypt_header_get_keydata","","",null,null],[5,"g_mime_autocrypt_header_get_prefer_encrypt","","",null,null],[5,"g_mime_autocrypt_header_is_complete","","",null,null],[5,"g_mime_autocrypt_header_set_address","","",null,null],[5,"g_mime_autocrypt_header_set_address_from_string","","",null,null],[5,"g_mime_autocrypt_header_set_effective_date","","",null,null],[5,"g_mime_autocrypt_header_set_keydata","","",null,null],[5,"g_mime_autocrypt_header_set_prefer_encrypt","","",null,null],[5,"g_mime_autocrypt_header_to_string","","",null,null],[5,"g_mime_autocrypt_header_list_get_type","","",null,null],[5,"g_mime_autocrypt_header_list_new","","",null,null],[5,"g_mime_autocrypt_header_list_add","","",null,null],[5,"g_mime_autocrypt_header_list_add_missing_addresses","","",null,null],[5,"g_mime_autocrypt_header_list_get_count","","",null,null],[5,"g_mime_autocrypt_header_list_get_header_at","","",null,null],[5,"g_mime_autocrypt_header_list_get_header_for_address","","",null,null],[5,"g_mime_autocrypt_header_list_remove_incomplete","","",null,null],[5,"g_mime_certificate_get_type","","",null,null],[5,"g_mime_certificate_new","","",null,null],[5,"g_mime_certificate_get_created","","",null,null],[5,"g_mime_certificate_get_digest_algo","","",null,null],[5,"g_mime_certificate_get_email","","",null,null],[5,"g_mime_certificate_get_expires","","",null,null],[5,"g_mime_certificate_get_fingerprint","","",null,null],[5,"g_mime_certificate_get_id_validity","","",null,null],[5,"g_mime_certificate_get_issuer_name","","",null,null],[5,"g_mime_certificate_get_issuer_serial","","",null,null],[5,"g_mime_certificate_get_key_id","","",null,null],[5,"g_mime_certificate_get_name","","",null,null],[5,"g_mime_certificate_get_pubkey_algo","","",null,null],[5,"g_mime_certificate_get_trust","","",null,null],[5,"g_mime_certificate_get_user_id","","",null,null],[5,"g_mime_certificate_set_created","","",null,null],[5,"g_mime_certificate_set_digest_algo","","",null,null],[5,"g_mime_certificate_set_email","","",null,null],[5,"g_mime_certificate_set_expires","","",null,null],[5,"g_mime_certificate_set_fingerprint","","",null,null],[5,"g_mime_certificate_set_id_validity","","",null,null],[5,"g_mime_certificate_set_issuer_name","","",null,null],[5,"g_mime_certificate_set_issuer_serial","","",null,null],[5,"g_mime_certificate_set_key_id","","",null,null],[5,"g_mime_certificate_set_name","","",null,null],[5,"g_mime_certificate_set_pubkey_algo","","",null,null],[5,"g_mime_certificate_set_trust","","",null,null],[5,"g_mime_certificate_set_user_id","","",null,null],[5,"g_mime_certificate_list_get_type","","",null,null],[5,"g_mime_certificate_list_new","","",null,null],[5,"g_mime_certificate_list_add","","",null,null],[5,"g_mime_certificate_list_clear","","",null,null],[5,"g_mime_certificate_list_contains","","",null,null],[5,"g_mime_certificate_list_get_certificate","","",null,null],[5,"g_mime_certificate_list_index_of","","",null,null],[5,"g_mime_certificate_list_insert","","",null,null],[5,"g_mime_certificate_list_length","","",null,null],[5,"g_mime_certificate_list_remove","","",null,null],[5,"g_mime_certificate_list_remove_at","","",null,null],[5,"g_mime_certificate_list_set_certificate","","",null,null],[5,"g_mime_content_disposition_get_type","","",null,null],[5,"g_mime_content_disposition_new","","",null,null],[5,"g_mime_content_disposition_parse","","",null,null],[5,"g_mime_content_disposition_encode","","",null,null],[5,"g_mime_content_disposition_get_disposition","","",null,null],[5,"g_mime_content_disposition_get_parameter","","",null,null],[5,"g_mime_content_disposition_get_parameters","","",null,null],[5,"g_mime_content_disposition_is_attachment","","",null,null],[5,"g_mime_content_disposition_set_disposition","","",null,null],[5,"g_mime_content_disposition_set_parameter","","",null,null],[5,"g_mime_content_type_get_type","","",null,null],[5,"g_mime_content_type_new","","",null,null],[5,"g_mime_content_type_parse","","",null,null],[5,"g_mime_content_type_encode","","",null,null],[5,"g_mime_content_type_get_media_subtype","","",null,null],[5,"g_mime_content_type_get_media_type","","",null,null],[5,"g_mime_content_type_get_mime_type","","",null,null],[5,"g_mime_content_type_get_parameter","","",null,null],[5,"g_mime_content_type_get_parameters","","",null,null],[5,"g_mime_content_type_is_type","","",null,null],[5,"g_mime_content_type_set_media_subtype","","",null,null],[5,"g_mime_content_type_set_media_type","","",null,null],[5,"g_mime_content_type_set_parameter","","",null,null],[5,"g_mime_crypto_context_get_type","","",null,null],[5,"g_mime_crypto_context_new","","",null,null],[5,"g_mime_crypto_context_register","","",null,null],[5,"g_mime_crypto_context_decrypt","","",null,null],[5,"g_mime_crypto_context_digest_id","","",null,null],[5,"g_mime_crypto_context_digest_name","","",null,null],[5,"g_mime_crypto_context_encrypt","","",null,null],[5,"g_mime_crypto_context_export_keys","","",null,null],[5,"g_mime_crypto_context_get_encryption_protocol","","",null,null],[5,"g_mime_crypto_context_get_key_exchange_protocol","","",null,null],[5,"g_mime_crypto_context_get_signature_protocol","","",null,null],[5,"g_mime_crypto_context_import_keys","","",null,null],[5,"g_mime_crypto_context_set_request_password","","",null,null],[5,"g_mime_crypto_context_sign","","",null,null],[5,"g_mime_crypto_context_verify","","",null,null],[5,"g_mime_data_wrapper_get_type","","",null,null],[5,"g_mime_data_wrapper_new","","",null,null],[5,"g_mime_data_wrapper_new_with_stream","","",null,null],[5,"g_mime_data_wrapper_get_encoding","","",null,null],[5,"g_mime_data_wrapper_get_stream","","",null,null],[5,"g_mime_data_wrapper_set_encoding","","",null,null],[5,"g_mime_data_wrapper_set_stream","","",null,null],[5,"g_mime_data_wrapper_write_to_stream","","",null,null],[5,"g_mime_decrypt_result_get_type","","",null,null],[5,"g_mime_decrypt_result_new","","",null,null],[5,"g_mime_decrypt_result_get_cipher","","",null,null],[5,"g_mime_decrypt_result_get_mdc","","",null,null],[5,"g_mime_decrypt_result_get_recipients","","",null,null],[5,"g_mime_decrypt_result_get_session_key","","",null,null],[5,"g_mime_decrypt_result_get_signatures","","",null,null],[5,"g_mime_decrypt_result_set_cipher","","",null,null],[5,"g_mime_decrypt_result_set_mdc","","",null,null],[5,"g_mime_decrypt_result_set_recipients","","",null,null],[5,"g_mime_decrypt_result_set_session_key","","",null,null],[5,"g_mime_decrypt_result_set_signatures","","",null,null],[5,"g_mime_filter_get_type","","",null,null],[5,"g_mime_filter_backup","","",null,null],[5,"g_mime_filter_complete","","",null,null],[5,"g_mime_filter_copy","","",null,null],[5,"g_mime_filter_filter","","",null,null],[5,"g_mime_filter_reset","","",null,null],[5,"g_mime_filter_set_size","","",null,null],[5,"g_mime_filter_basic_get_type","","",null,null],[5,"g_mime_filter_basic_new","","",null,null],[5,"g_mime_filter_best_get_type","","",null,null],[5,"g_mime_filter_best_new","","",null,null],[5,"g_mime_filter_best_charset","","",null,null],[5,"g_mime_filter_best_encoding","","",null,null],[5,"g_mime_filter_charset_get_type","","",null,null],[5,"g_mime_filter_charset_new","","",null,null],[5,"g_mime_filter_checksum_get_type","","",null,null],[5,"g_mime_filter_checksum_new","","",null,null],[5,"g_mime_filter_checksum_get_digest","","",null,null],[5,"g_mime_filter_checksum_get_string","","",null,null],[5,"g_mime_filter_dos2unix_get_type","","",null,null],[5,"g_mime_filter_dos2unix_new","","",null,null],[5,"g_mime_filter_enriched_get_type","","",null,null],[5,"g_mime_filter_enriched_new","","",null,null],[5,"g_mime_filter_from_get_type","","",null,null],[5,"g_mime_filter_from_new","","",null,null],[5,"g_mime_filter_gzip_get_type","","",null,null],[5,"g_mime_filter_gzip_new","","",null,null],[5,"g_mime_filter_html_get_type","","",null,null],[5,"g_mime_filter_html_new","","",null,null],[5,"g_mime_filter_openpgp_get_type","","",null,null],[5,"g_mime_filter_smtp_data_get_type","","",null,null],[5,"g_mime_filter_smtp_data_new","","",null,null],[5,"g_mime_filter_strip_get_type","","",null,null],[5,"g_mime_filter_strip_new","","",null,null],[5,"g_mime_filter_unix2dos_get_type","","",null,null],[5,"g_mime_filter_unix2dos_new","","",null,null],[5,"g_mime_filter_windows_get_type","","",null,null],[5,"g_mime_filter_windows_new","","",null,null],[5,"g_mime_filter_windows_is_windows_charset","","",null,null],[5,"g_mime_filter_windows_real_charset","","",null,null],[5,"g_mime_filter_yenc_get_type","","",null,null],[5,"g_mime_filter_yenc_new","","",null,null],[5,"g_mime_filter_yenc_get_crc","","",null,null],[5,"g_mime_filter_yenc_get_pcrc","","",null,null],[5,"g_mime_filter_yenc_set_crc","","",null,null],[5,"g_mime_filter_yenc_set_state","","",null,null],[5,"g_mime_gpg_context_get_type","","",null,null],[5,"g_mime_gpg_context_new","","",null,null],[5,"g_mime_header_get_type","","",null,null],[5,"g_mime_header_format_addrlist","","",null,null],[5,"g_mime_header_format_content_disposition","","",null,null],[5,"g_mime_header_format_content_type","","",null,null],[5,"g_mime_header_format_default","","",null,null],[5,"g_mime_header_format_message_id","","",null,null],[5,"g_mime_header_format_received","","",null,null],[5,"g_mime_header_format_references","","",null,null],[5,"g_mime_header_get_name","","",null,null],[5,"g_mime_header_get_offset","","",null,null],[5,"g_mime_header_get_raw_name","","",null,null],[5,"g_mime_header_get_raw_value","","",null,null],[5,"g_mime_header_get_value","","",null,null],[5,"g_mime_header_set_raw_value","","",null,null],[5,"g_mime_header_set_value","","",null,null],[5,"g_mime_header_write_to_stream","","",null,null],[5,"g_mime_header_list_get_type","","",null,null],[5,"g_mime_header_list_new","","",null,null],[5,"g_mime_header_list_append","","",null,null],[5,"g_mime_header_list_clear","","",null,null],[5,"g_mime_header_list_contains","","",null,null],[5,"g_mime_header_list_get_count","","",null,null],[5,"g_mime_header_list_get_header","","",null,null],[5,"g_mime_header_list_get_header_at","","",null,null],[5,"g_mime_header_list_prepend","","",null,null],[5,"g_mime_header_list_remove","","",null,null],[5,"g_mime_header_list_remove_at","","",null,null],[5,"g_mime_header_list_set","","",null,null],[5,"g_mime_header_list_to_string","","",null,null],[5,"g_mime_header_list_write_to_stream","","",null,null],[5,"g_mime_message_get_type","","",null,null],[5,"g_mime_message_new","","",null,null],[5,"g_mime_message_add_mailbox","","",null,null],[5,"g_mime_message_foreach","","",null,null],[5,"g_mime_message_get_addresses","","",null,null],[5,"g_mime_message_get_all_recipients","","",null,null],[5,"g_mime_message_get_autocrypt_gossip_headers","","",null,null],[5,"g_mime_message_get_autocrypt_gossip_headers_from_inner_part","","",null,null],[5,"g_mime_message_get_autocrypt_header","","",null,null],[5,"g_mime_message_get_bcc","","",null,null],[5,"g_mime_message_get_body","","",null,null],[5,"g_mime_message_get_cc","","",null,null],[5,"g_mime_message_get_date","","",null,null],[5,"g_mime_message_get_from","","",null,null],[5,"g_mime_message_get_message_id","","",null,null],[5,"g_mime_message_get_mime_part","","",null,null],[5,"g_mime_message_get_reply_to","","",null,null],[5,"g_mime_message_get_sender","","",null,null],[5,"g_mime_message_get_subject","","",null,null],[5,"g_mime_message_get_to","","",null,null],[5,"g_mime_message_partial_split_message","","",null,null],[5,"g_mime_message_set_date","","",null,null],[5,"g_mime_message_set_message_id","","",null,null],[5,"g_mime_message_set_mime_part","","",null,null],[5,"g_mime_message_set_subject","","",null,null],[5,"g_mime_message_part_get_type","","",null,null],[5,"g_mime_message_part_new","","",null,null],[5,"g_mime_message_part_new_with_message","","",null,null],[5,"g_mime_message_part_get_message","","",null,null],[5,"g_mime_message_part_set_message","","",null,null],[5,"g_mime_message_partial_get_type","","",null,null],[5,"g_mime_message_partial_new","","",null,null],[5,"g_mime_message_partial_reconstruct_message","","",null,null],[5,"g_mime_message_partial_get_id","","",null,null],[5,"g_mime_message_partial_get_number","","",null,null],[5,"g_mime_message_partial_get_total","","",null,null],[5,"g_mime_multipart_get_type","","",null,null],[5,"g_mime_multipart_new","","",null,null],[5,"g_mime_multipart_new_with_subtype","","",null,null],[5,"g_mime_multipart_add","","",null,null],[5,"g_mime_multipart_clear","","",null,null],[5,"g_mime_multipart_contains","","",null,null],[5,"g_mime_multipart_foreach","","",null,null],[5,"g_mime_multipart_get_boundary","","",null,null],[5,"g_mime_multipart_get_count","","",null,null],[5,"g_mime_multipart_get_epilogue","","",null,null],[5,"g_mime_multipart_get_part","","",null,null],[5,"g_mime_multipart_get_prologue","","",null,null],[5,"g_mime_multipart_get_subpart_from_content_id","","",null,null],[5,"g_mime_multipart_index_of","","",null,null],[5,"g_mime_multipart_insert","","",null,null],[5,"g_mime_multipart_remove","","",null,null],[5,"g_mime_multipart_remove_at","","",null,null],[5,"g_mime_multipart_replace","","",null,null],[5,"g_mime_multipart_set_boundary","","",null,null],[5,"g_mime_multipart_set_epilogue","","",null,null],[5,"g_mime_multipart_set_prologue","","",null,null],[5,"g_mime_multipart_encrypted_get_type","","",null,null],[5,"g_mime_multipart_encrypted_new","","",null,null],[5,"g_mime_multipart_encrypted_encrypt","","",null,null],[5,"g_mime_multipart_encrypted_decrypt","","",null,null],[5,"g_mime_multipart_signed_get_type","","",null,null],[5,"g_mime_multipart_signed_new","","",null,null],[5,"g_mime_multipart_signed_sign","","",null,null],[5,"g_mime_multipart_signed_verify","","",null,null],[5,"g_mime_object_get_type","","",null,null],[5,"g_mime_object_new","","",null,null],[5,"g_mime_object_new_type","","",null,null],[5,"g_mime_object_register_type","","",null,null],[5,"g_mime_object_type_registry_init","","",null,null],[5,"g_mime_object_type_registry_shutdown","","",null,null],[5,"g_mime_object_append_header","","",null,null],[5,"g_mime_object_encode","","",null,null],[5,"g_mime_object_get_autocrypt_headers","","",null,null],[5,"g_mime_object_get_content_disposition","","",null,null],[5,"g_mime_object_get_content_disposition_parameter","","",null,null],[5,"g_mime_object_get_content_id","","",null,null],[5,"g_mime_object_get_content_type","","",null,null],[5,"g_mime_object_get_content_type_parameter","","",null,null],[5,"g_mime_object_get_disposition","","",null,null],[5,"g_mime_object_get_header","","",null,null],[5,"g_mime_object_get_header_list","","",null,null],[5,"g_mime_object_get_headers","","",null,null],[5,"g_mime_object_prepend_header","","",null,null],[5,"g_mime_object_remove_header","","",null,null],[5,"g_mime_object_set_content_disposition","","",null,null],[5,"g_mime_object_set_content_disposition_parameter","","",null,null],[5,"g_mime_object_set_content_id","","",null,null],[5,"g_mime_object_set_content_type","","",null,null],[5,"g_mime_object_set_content_type_parameter","","",null,null],[5,"g_mime_object_set_disposition","","",null,null],[5,"g_mime_object_set_header","","",null,null],[5,"g_mime_object_to_string","","",null,null],[5,"g_mime_object_write_to_stream","","",null,null],[5,"g_mime_param_get_type","","",null,null],[5,"g_mime_param_get_charset","","",null,null],[5,"g_mime_param_get_encoding_method","","",null,null],[5,"g_mime_param_get_lang","","",null,null],[5,"g_mime_param_get_name","","",null,null],[5,"g_mime_param_get_value","","",null,null],[5,"g_mime_param_set_charset","","",null,null],[5,"g_mime_param_set_encoding_method","","",null,null],[5,"g_mime_param_set_lang","","",null,null],[5,"g_mime_param_set_value","","",null,null],[5,"g_mime_param_list_get_type","","",null,null],[5,"g_mime_param_list_new","","",null,null],[5,"g_mime_param_list_parse","","",null,null],[5,"g_mime_param_list_clear","","",null,null],[5,"g_mime_param_list_encode","","",null,null],[5,"g_mime_param_list_get_parameter","","",null,null],[5,"g_mime_param_list_get_parameter_at","","",null,null],[5,"g_mime_param_list_length","","",null,null],[5,"g_mime_param_list_remove","","",null,null],[5,"g_mime_param_list_remove_at","","",null,null],[5,"g_mime_param_list_set_parameter","","",null,null],[5,"g_mime_parser_get_type","","",null,null],[5,"g_mime_parser_new","","",null,null],[5,"g_mime_parser_new_with_stream","","",null,null],[5,"g_mime_parser_construct_message","","",null,null],[5,"g_mime_parser_construct_part","","",null,null],[5,"g_mime_parser_eos","","",null,null],[5,"g_mime_parser_get_format","","",null,null],[5,"g_mime_parser_get_headers_begin","","",null,null],[5,"g_mime_parser_get_headers_end","","",null,null],[5,"g_mime_parser_get_mbox_marker","","",null,null],[5,"g_mime_parser_get_mbox_marker_offset","","",null,null],[5,"g_mime_parser_get_persist_stream","","",null,null],[5,"g_mime_parser_get_respect_content_length","","",null,null],[5,"g_mime_parser_init_with_stream","","",null,null],[5,"g_mime_parser_set_format","","",null,null],[5,"g_mime_parser_set_header_regex","","",null,null],[5,"g_mime_parser_set_persist_stream","","",null,null],[5,"g_mime_parser_set_respect_content_length","","",null,null],[5,"g_mime_parser_tell","","",null,null],[5,"g_mime_part_get_type","","",null,null],[5,"g_mime_part_new","","",null,null],[5,"g_mime_part_new_with_type","","",null,null],[5,"g_mime_part_get_best_content_encoding","","",null,null],[5,"g_mime_part_get_content","","",null,null],[5,"g_mime_part_get_content_description","","",null,null],[5,"g_mime_part_get_content_encoding","","",null,null],[5,"g_mime_part_get_content_id","","",null,null],[5,"g_mime_part_get_content_location","","",null,null],[5,"g_mime_part_get_content_md5","","",null,null],[5,"g_mime_part_get_filename","","",null,null],[5,"g_mime_part_get_openpgp_data","","",null,null],[5,"g_mime_part_is_attachment","","",null,null],[5,"g_mime_part_openpgp_decrypt","","",null,null],[5,"g_mime_part_openpgp_encrypt","","",null,null],[5,"g_mime_part_openpgp_sign","","",null,null],[5,"g_mime_part_openpgp_verify","","",null,null],[5,"g_mime_part_set_content","","",null,null],[5,"g_mime_part_set_content_description","","",null,null],[5,"g_mime_part_set_content_encoding","","",null,null],[5,"g_mime_part_set_content_id","","",null,null],[5,"g_mime_part_set_content_location","","",null,null],[5,"g_mime_part_set_content_md5","","",null,null],[5,"g_mime_part_set_filename","","",null,null],[5,"g_mime_part_set_openpgp_data","","",null,null],[5,"g_mime_part_verify_content_md5","","",null,null],[5,"g_mime_pkcs7_context_get_type","","",null,null],[5,"g_mime_pkcs7_context_new","","",null,null],[5,"g_mime_signature_get_type","","",null,null],[5,"g_mime_signature_new","","",null,null],[5,"g_mime_signature_get_certificate","","",null,null],[5,"g_mime_signature_get_created","","",null,null],[5,"g_mime_signature_get_expires","","",null,null],[5,"g_mime_signature_get_status","","",null,null],[5,"g_mime_signature_set_certificate","","",null,null],[5,"g_mime_signature_set_created","","",null,null],[5,"g_mime_signature_set_expires","","",null,null],[5,"g_mime_signature_set_status","","",null,null],[5,"g_mime_signature_list_get_type","","",null,null],[5,"g_mime_signature_list_new","","",null,null],[5,"g_mime_signature_list_add","","",null,null],[5,"g_mime_signature_list_clear","","",null,null],[5,"g_mime_signature_list_contains","","",null,null],[5,"g_mime_signature_list_get_signature","","",null,null],[5,"g_mime_signature_list_index_of","","",null,null],[5,"g_mime_signature_list_insert","","",null,null],[5,"g_mime_signature_list_length","","",null,null],[5,"g_mime_signature_list_remove","","",null,null],[5,"g_mime_signature_list_remove_at","","",null,null],[5,"g_mime_signature_list_set_signature","","",null,null],[5,"g_mime_stream_get_type","","",null,null],[5,"g_mime_stream_buffer_gets","","",null,null],[5,"g_mime_stream_buffer_readln","","",null,null],[5,"g_mime_stream_close","","",null,null],[5,"g_mime_stream_construct","","",null,null],[5,"g_mime_stream_eos","","",null,null],[5,"g_mime_stream_flush","","",null,null],[5,"g_mime_stream_length","","",null,null],[5,"g_mime_stream_printf","","",null,null],[5,"g_mime_stream_read","","",null,null],[5,"g_mime_stream_reset","","",null,null],[5,"g_mime_stream_seek","","",null,null],[5,"g_mime_stream_set_bounds","","",null,null],[5,"g_mime_stream_substream","","",null,null],[5,"g_mime_stream_tell","","",null,null],[5,"g_mime_stream_write","","",null,null],[5,"g_mime_stream_write_string","","",null,null],[5,"g_mime_stream_write_to_stream","","",null,null],[5,"g_mime_stream_writev","","",null,null],[5,"g_mime_stream_buffer_get_type","","",null,null],[5,"g_mime_stream_buffer_new","","",null,null],[5,"g_mime_stream_cat_get_type","","",null,null],[5,"g_mime_stream_cat_new","","",null,null],[5,"g_mime_stream_cat_add_source","","",null,null],[5,"g_mime_stream_file_get_type","","",null,null],[5,"g_mime_stream_file_new","","",null,null],[5,"g_mime_stream_file_new_with_bounds","","",null,null],[5,"g_mime_stream_file_open","","",null,null],[5,"g_mime_stream_file_get_owner","","",null,null],[5,"g_mime_stream_file_set_owner","","",null,null],[5,"g_mime_stream_filter_get_type","","",null,null],[5,"g_mime_stream_filter_new","","",null,null],[5,"g_mime_stream_filter_add","","",null,null],[5,"g_mime_stream_filter_get_owner","","",null,null],[5,"g_mime_stream_filter_remove","","",null,null],[5,"g_mime_stream_filter_set_owner","","",null,null],[5,"g_mime_stream_fs_get_type","","",null,null],[5,"g_mime_stream_fs_new","","",null,null],[5,"g_mime_stream_fs_new_with_bounds","","",null,null],[5,"g_mime_stream_fs_open","","",null,null],[5,"g_mime_stream_fs_get_owner","","",null,null],[5,"g_mime_stream_fs_set_owner","","",null,null],[5,"g_mime_stream_gio_get_type","","",null,null],[5,"g_mime_stream_gio_new","","",null,null],[5,"g_mime_stream_gio_new_with_bounds","","",null,null],[5,"g_mime_stream_gio_get_owner","","",null,null],[5,"g_mime_stream_gio_set_owner","","",null,null],[5,"g_mime_stream_mem_get_type","","",null,null],[5,"g_mime_stream_mem_new","","",null,null],[5,"g_mime_stream_mem_new_with_buffer","","",null,null],[5,"g_mime_stream_mem_new_with_byte_array","","",null,null],[5,"g_mime_stream_mem_get_byte_array","","",null,null],[5,"g_mime_stream_mem_get_owner","","",null,null],[5,"g_mime_stream_mem_set_byte_array","","",null,null],[5,"g_mime_stream_mem_set_owner","","",null,null],[5,"g_mime_stream_mmap_get_type","","",null,null],[5,"g_mime_stream_mmap_new","","",null,null],[5,"g_mime_stream_mmap_new_with_bounds","","",null,null],[5,"g_mime_stream_null_get_type","","",null,null],[5,"g_mime_stream_null_new","","",null,null],[5,"g_mime_stream_null_get_count_newlines","","",null,null],[5,"g_mime_stream_null_set_count_newlines","","",null,null],[5,"g_mime_stream_pipe_get_type","","",null,null],[5,"g_mime_stream_pipe_new","","",null,null],[5,"g_mime_stream_pipe_get_owner","","",null,null],[5,"g_mime_stream_pipe_set_owner","","",null,null],[5,"g_mime_text_part_get_type","","",null,null],[5,"g_mime_text_part_new","","",null,null],[5,"g_mime_text_part_new_with_subtype","","",null,null],[5,"g_mime_text_part_get_charset","","",null,null],[5,"g_mime_text_part_get_text","","",null,null],[5,"g_mime_text_part_set_charset","","",null,null],[5,"g_mime_text_part_set_text","","",null,null],[5,"internet_address_get_type","","",null,null],[5,"internet_address_get_charset","","",null,null],[5,"internet_address_get_name","","",null,null],[5,"internet_address_set_charset","","",null,null],[5,"internet_address_set_name","","",null,null],[5,"internet_address_to_string","","",null,null],[5,"internet_address_group_get_type","","",null,null],[5,"internet_address_group_new","","",null,null],[5,"internet_address_group_add_member","","",null,null],[5,"internet_address_group_get_members","","",null,null],[5,"internet_address_group_set_members","","",null,null],[5,"internet_address_list_get_type","","",null,null],[5,"internet_address_list_new","","",null,null],[5,"internet_address_list_parse","","",null,null],[5,"internet_address_list_add","","",null,null],[5,"internet_address_list_append","","",null,null],[5,"internet_address_list_clear","","",null,null],[5,"internet_address_list_contains","","",null,null],[5,"internet_address_list_encode","","",null,null],[5,"internet_address_list_get_address","","",null,null],[5,"internet_address_list_index_of","","",null,null],[5,"internet_address_list_insert","","",null,null],[5,"internet_address_list_length","","",null,null],[5,"internet_address_list_prepend","","",null,null],[5,"internet_address_list_remove","","",null,null],[5,"internet_address_list_remove_at","","",null,null],[5,"internet_address_list_set_address","","",null,null],[5,"internet_address_list_to_string","","",null,null],[5,"internet_address_mailbox_get_type","","",null,null],[5,"internet_address_mailbox_new","","",null,null],[5,"internet_address_mailbox_get_addr","","",null,null],[5,"internet_address_mailbox_get_idn_addr","","",null,null],[5,"internet_address_mailbox_set_addr","","",null,null],[5,"g_mime_check_version","","",null,null],[5,"g_mime_content_encoding_from_string","","",null,null],[5,"g_mime_content_encoding_to_string","","",null,null],[5,"g_mime_iconv_close","","",null,null],[5,"g_mime_iconv_locale_to_utf8","","",null,null],[5,"g_mime_iconv_locale_to_utf8_length","","",null,null],[5,"g_mime_iconv_open","","",null,null],[5,"g_mime_iconv_strdup","","",null,null],[5,"g_mime_iconv_strndup","","",null,null],[5,"g_mime_iconv_utf8_to_locale","","",null,null],[5,"g_mime_iconv_utf8_to_locale_length","","",null,null],[5,"g_mime_init","","",null,null],[5,"g_mime_locale_charset","","",null,null],[5,"g_mime_locale_language","","",null,null],[5,"g_mime_shutdown","","",null,null],[5,"g_mime_utils_best_encoding","","",null,null],[5,"g_mime_utils_decode_8bit","","",null,null],[5,"g_mime_utils_decode_message_id","","",null,null],[5,"g_mime_utils_generate_message_id","","",null,null],[5,"g_mime_utils_header_decode_date","","",null,null],[5,"g_mime_utils_header_decode_phrase","","",null,null],[5,"g_mime_utils_header_decode_text","","",null,null],[5,"g_mime_utils_header_encode_phrase","","",null,null],[5,"g_mime_utils_header_encode_text","","",null,null],[5,"g_mime_utils_header_format_date","","",null,null],[5,"g_mime_utils_header_printf","","",null,null],[5,"g_mime_utils_header_unfold","","",null,null],[5,"g_mime_utils_quote_string","","",null,null],[5,"g_mime_utils_structured_header_fold","","",null,null],[5,"g_mime_utils_text_is_8bit","","",null,null],[5,"g_mime_utils_unquote_string","","",null,null],[5,"g_mime_utils_unstructured_header_fold","","",null,null],[5,"g_mime_ydecode_step","","",null,null],[5,"g_mime_yencode_close","","",null,null],[5,"g_mime_yencode_step","","",null,null],[6,"_GMimeFilterPrivate","","",null,null],[6,"_GMimeFilterGZipPrivate","","",null,null],[6,"_GMimeParserPrivate","","",null,null],[6,"_GMimeStreamFilterPrivate","","",null,null],[6,"_UrlScanner","","",null,null],[6,"_cat_node","","",null,null],[6,"iconv_t","","",null,null],[6,"GMimeAddressType","","",null,null],[6,"GMimeAutocryptPreferEncrypt","","",null,null],[6,"GMimeCipherAlgo","","",null,null],[6,"GMimeContentEncoding","","",null,null],[6,"GMimeDigestAlgo","","",null,null],[6,"GMimeEncodingConstraint","","",null,null],[6,"GMimeEncryptFlags","","",null,null],[6,"GMimeFilterFromMode","","",null,null],[6,"GMimeFilterGZipMode","","",null,null],[6,"GMimeFormat","","",null,null],[6,"GMimeNewLineFormat","","",null,null],[6,"GMimeOpenPGPData","","",null,null],[6,"GMimeParamEncodingMethod","","",null,null],[6,"GMimeParserWarning","","",null,null],[6,"GMimePubKeyAlgo","","",null,null],[6,"GMimeRfcComplianceMode","","",null,null],[6,"GMimeSecureMimeType","","",null,null],[6,"GMimeSeekWhence","","",null,null],[6,"GMimeSignatureStatus","","",null,null],[6,"GMimeStreamBufferMode","","",null,null],[6,"GMimeTrust","","",null,null],[6,"GMimeValidity","","",null,null],[6,"VerifyFlags","","",null,null],[6,"GMimeVerifyFlags","","",null,null],[6,"GMimeCryptoContextNewFunc","","",null,null],[6,"GMimeHeaderRawValueFormatter","","",null,null],[6,"GMimeObjectForeachFunc","","",null,null],[6,"GMimeParserHeaderRegexFunc","","",null,null],[6,"GMimeParserWarningFunc","","",null,null],[6,"GMimePasswordRequestFunc","","",null,null],[17,"GMIME_ADDRESS_TYPE_SENDER","","",null,null],[17,"GMIME_ADDRESS_TYPE_FROM","","",null,null],[17,"GMIME_ADDRESS_TYPE_REPLY_TO","","",null,null],[17,"GMIME_ADDRESS_TYPE_TO","","",null,null],[17,"GMIME_ADDRESS_TYPE_CC","","",null,null],[17,"GMIME_ADDRESS_TYPE_BCC","","",null,null],[17,"GMIME_AUTOCRYPT_PREFER_ENCRYPT_NONE","","",null,null],[17,"GMIME_AUTOCRYPT_PREFER_ENCRYPT_MUTUAL","","",null,null],[17,"GMIME_CIPHER_ALGO_DEFAULT","","",null,null],[17,"GMIME_CIPHER_ALGO_IDEA","","",null,null],[17,"GMIME_CIPHER_ALGO_3DES","","",null,null],[17,"GMIME_CIPHER_ALGO_CAST5","","",null,null],[17,"GMIME_CIPHER_ALGO_BLOWFISH","","",null,null],[17,"GMIME_CIPHER_ALGO_AES","","",null,null],[17,"GMIME_CIPHER_ALGO_AES192","","",null,null],[17,"GMIME_CIPHER_ALGO_AES256","","",null,null],[17,"GMIME_CIPHER_ALGO_TWOFISH","","",null,null],[17,"GMIME_CIPHER_ALGO_CAMELLIA128","","",null,null],[17,"GMIME_CIPHER_ALGO_CAMELLIA192","","",null,null],[17,"GMIME_CIPHER_ALGO_CAMELLIA256","","",null,null],[17,"GMIME_CONTENT_ENCODING_DEFAULT","","",null,null],[17,"GMIME_CONTENT_ENCODING_7BIT","","",null,null],[17,"GMIME_CONTENT_ENCODING_8BIT","","",null,null],[17,"GMIME_CONTENT_ENCODING_BINARY","","",null,null],[17,"GMIME_CONTENT_ENCODING_BASE64","","",null,null],[17,"GMIME_CONTENT_ENCODING_QUOTEDPRINTABLE","","",null,null],[17,"GMIME_CONTENT_ENCODING_UUENCODE","","",null,null],[17,"GMIME_DIGEST_ALGO_DEFAULT","","",null,null],[17,"GMIME_DIGEST_ALGO_MD5","","",null,null],[17,"GMIME_DIGEST_ALGO_SHA1","","",null,null],[17,"GMIME_DIGEST_ALGO_RIPEMD160","","",null,null],[17,"GMIME_DIGEST_ALGO_MD2","","",null,null],[17,"GMIME_DIGEST_ALGO_TIGER192","","",null,null],[17,"GMIME_DIGEST_ALGO_HAVAL5160","","",null,null],[17,"GMIME_DIGEST_ALGO_SHA256","","",null,null],[17,"GMIME_DIGEST_ALGO_SHA384","","",null,null],[17,"GMIME_DIGEST_ALGO_SHA512","","",null,null],[17,"GMIME_DIGEST_ALGO_SHA224","","",null,null],[17,"GMIME_DIGEST_ALGO_MD4","","",null,null],[17,"GMIME_DIGEST_ALGO_CRC32","","",null,null],[17,"GMIME_DIGEST_ALGO_CRC32_RFC1510","","",null,null],[17,"GMIME_DIGEST_ALGO_CRC32_RFC2440","","",null,null],[17,"GMIME_ENCODING_CONSTRAINT_7BIT","","",null,null],[17,"GMIME_ENCODING_CONSTRAINT_8BIT","","",null,null],[17,"GMIME_ENCODING_CONSTRAINT_BINARY","","",null,null],[17,"GMIME_ENCRYPT_NONE","","",null,null],[17,"GMIME_ENCRYPT_ALWAYS_TRUST","","",null,null],[17,"GMIME_ENCRYPT_NO_COMPRESS","","",null,null],[17,"GMIME_ENCRYPT_SYMMETRIC","","",null,null],[17,"GMIME_ENCRYPT_THROW_KEYIDS","","",null,null],[17,"GMIME_FILTER_FROM_MODE_DEFAULT","","",null,null],[17,"GMIME_FILTER_FROM_MODE_ARMOR","","",null,null],[17,"GMIME_FILTER_GZIP_MODE_ZIP","","",null,null],[17,"GMIME_FILTER_GZIP_MODE_UNZIP","","",null,null],[17,"GMIME_FORMAT_MESSAGE","","",null,null],[17,"GMIME_FORMAT_MBOX","","",null,null],[17,"GMIME_FORMAT_MMDF","","",null,null],[17,"GMIME_NEWLINE_FORMAT_UNIX","","",null,null],[17,"GMIME_NEWLINE_FORMAT_DOS","","",null,null],[17,"GMIME_OPENPGP_DATA_NONE","","",null,null],[17,"GMIME_OPENPGP_DATA_ENCRYPTED","","",null,null],[17,"GMIME_OPENPGP_DATA_SIGNED","","",null,null],[17,"GMIME_OPENPGP_DATA_PUBLIC_KEY","","",null,null],[17,"GMIME_OPENPGP_DATA_PRIVATE_KEY","","",null,null],[17,"GMIME_PARAM_ENCODING_METHOD_DEFAULT","","",null,null],[17,"GMIME_PARAM_ENCODING_METHOD_RFC2231","","",null,null],[17,"GMIME_PARAM_ENCODING_METHOD_RFC2047","","",null,null],[17,"GMIME_WARN_DUPLICATED_CONTENT_HDR","","",null,null],[17,"GMIME_WARN_DUPLICATED_PARAMETER","","",null,null],[17,"GMIME_WARN_UNENCODED_8BIT_HEADER","","",null,null],[17,"GMIME_WARN_INVALID_CONTENT_TYPE","","",null,null],[17,"GMIME_WARN_INVALID_HEADER","","",null,null],[17,"GMIME_WARN_MALFORMED_MULTIPART","","",null,null],[17,"GMIME_WARN_TRUNCATED_MESSAGE","","",null,null],[17,"GMIME_WARN_MALFORMED_MESSAGE","","",null,null],[17,"GMIME_CRIT_CONFLICTING_CONTENT_HDR","","",null,null],[17,"GMIME_CRIT_CONFLICTING_PARAMETER","","",null,null],[17,"GMIME_CRIT_MULTIPART_WITHOUT_BOUNDARY","","",null,null],[17,"GMIME_PUBKEY_ALGO_DEFAULT","","",null,null],[17,"GMIME_PUBKEY_ALGO_RSA","","",null,null],[17,"GMIME_PUBKEY_ALGO_RSA_E","","",null,null],[17,"GMIME_PUBKEY_ALGO_RSA_S","","",null,null],[17,"GMIME_PUBKEY_ALGO_ELG_E","","",null,null],[17,"GMIME_PUBKEY_ALGO_DSA","","",null,null],[17,"GMIME_PUBKEY_ALGO_ECC","","",null,null],[17,"GMIME_PUBKEY_ALGO_ELG","","",null,null],[17,"GMIME_PUBKEY_ALGO_ECDSA","","",null,null],[17,"GMIME_PUBKEY_ALGO_ECDH","","",null,null],[17,"GMIME_PUBKEY_ALGO_EDDSA","","",null,null],[17,"GMIME_RFC_COMPLIANCE_LOOSE","","",null,null],[17,"GMIME_RFC_COMPLIANCE_STRICT","","",null,null],[17,"GMIME_SECURE_MIME_TYPE_COMPRESSED_DATA","","",null,null],[17,"GMIME_SECURE_MIME_TYPE_ENVELOPED_DATA","","",null,null],[17,"GMIME_SECURE_MIME_TYPE_SIGNED_DATA","","",null,null],[17,"GMIME_SECURE_MIME_TYPE_CERTS_ONLY","","",null,null],[17,"GMIME_SECURE_MIME_TYPE_UNKNOWN","","",null,null],[17,"GMIME_STREAM_SEEK_SET","","",null,null],[17,"GMIME_STREAM_SEEK_CUR","","",null,null],[17,"GMIME_STREAM_SEEK_END","","",null,null],[17,"GMIME_SIGNATURE_STATUS_VALID","","",null,null],[17,"GMIME_SIGNATURE_STATUS_GREEN","","",null,null],[17,"GMIME_SIGNATURE_STATUS_RED","","",null,null],[17,"GMIME_SIGNATURE_STATUS_KEY_REVOKED","","",null,null],[17,"GMIME_SIGNATURE_STATUS_KEY_EXPIRED","","",null,null],[17,"GMIME_SIGNATURE_STATUS_SIG_EXPIRED","","",null,null],[17,"GMIME_SIGNATURE_STATUS_KEY_MISSING","","",null,null],[17,"GMIME_SIGNATURE_STATUS_CRL_MISSING","","",null,null],[17,"GMIME_SIGNATURE_STATUS_CRL_TOO_OLD","","",null,null],[17,"GMIME_SIGNATURE_STATUS_BAD_POLICY","","",null,null],[17,"GMIME_SIGNATURE_STATUS_SYS_ERROR","","",null,null],[17,"GMIME_SIGNATURE_STATUS_TOFU_CONFLICT","","",null,null],[17,"GMIME_STREAM_BUFFER_BLOCK_READ","","",null,null],[17,"GMIME_STREAM_BUFFER_BLOCK_WRITE","","",null,null],[17,"GMIME_TRUST_UNKNOWN","","",null,null],[17,"GMIME_TRUST_UNDEFINED","","",null,null],[17,"GMIME_TRUST_NEVER","","",null,null],[17,"GMIME_TRUST_MARGINAL","","",null,null],[17,"GMIME_TRUST_FULL","","",null,null],[17,"GMIME_TRUST_ULTIMATE","","",null,null],[17,"GMIME_VALIDITY_UNKNOWN","","",null,null],[17,"GMIME_VALIDITY_UNDEFINED","","",null,null],[17,"GMIME_VALIDITY_NEVER","","",null,null],[17,"GMIME_VALIDITY_MARGINAL","","",null,null],[17,"GMIME_VALIDITY_FULL","","",null,null],[17,"GMIME_VALIDITY_ULTIMATE","","",null,null],[17,"GMIME_VERIFY_NONE","","",null,null],[17,"GMIME_BINARY_AGE","","",null,null],[17,"GMIME_DISPOSITION_ATTACHMENT","","",null,null],[17,"GMIME_DISPOSITION_INLINE","","",null,null],[17,"GMIME_FILTER_ENRICHED_IS_RICHTEXT","","",null,null],[17,"GMIME_FILTER_HTML_BLOCKQUOTE_CITATION","","",null,null],[17,"GMIME_FILTER_HTML_CITE","","",null,null],[17,"GMIME_FILTER_HTML_CONVERT_ADDRESSES","","",null,null],[17,"GMIME_FILTER_HTML_CONVERT_NL","","",null,null],[17,"GMIME_FILTER_HTML_CONVERT_SPACES","","",null,null],[17,"GMIME_FILTER_HTML_CONVERT_URLS","","",null,null],[17,"GMIME_FILTER_HTML_ESCAPE_8BIT","","",null,null],[17,"GMIME_FILTER_HTML_MARK_CITATION","","",null,null],[17,"GMIME_FILTER_HTML_PRE","","",null,null],[17,"GMIME_INTERFACE_AGE","","",null,null],[17,"GMIME_MAJOR_VERSION","","",null,null],[17,"GMIME_MICRO_VERSION","","",null,null],[17,"GMIME_MINOR_VERSION","","",null,null],[17,"GMIME_SIGNATURE_STATUS_ERROR_MASK","","",null,null],[17,"GMIME_UUDECODE_STATE_BEGIN","","",null,null],[17,"GMIME_UUDECODE_STATE_END","","",null,null],[17,"GMIME_UUDECODE_STATE_INIT","","",null,null],[17,"GMIME_UUDECODE_STATE_MASK","","",null,null],[17,"GMIME_YDECODE_STATE_BEGIN","","",null,null],[17,"GMIME_YDECODE_STATE_DECODE","","",null,null],[17,"GMIME_YDECODE_STATE_END","","",null,null],[17,"GMIME_YDECODE_STATE_EOLN","","",null,null],[17,"GMIME_YDECODE_STATE_ESCAPE","","",null,null],[17,"GMIME_YDECODE_STATE_INIT","","",null,null],[17,"GMIME_YDECODE_STATE_PART","","",null,null],[17,"GMIME_YENCODE_CRC_INIT","","",null,null],[17,"GMIME_YENCODE_STATE_INIT","","",null,null],[17,"GMIME_DECRYPT_NONE","","",null,null],[17,"GMIME_DECRYPT_EXPORT_SESSION_KEY","","",null,null],[17,"GMIME_FILTER_BEST_CHARSET","","",null,null],[17,"GMIME_FILTER_BEST_ENCODING","","",null,null],[17,"GMIME_OPENPGP_NONE","","",null,null],[17,"GMIME_OPENPGP_BEGIN_PGP_MESSAGE","","",null,null],[17,"GMIME_OPENPGP_END_PGP_MESSAGE","","",null,null],[17,"GMIME_OPENPGP_BEGIN_PGP_SIGNED_MESSAGE","","",null,null],[17,"GMIME_OPENPGP_BEGIN_PGP_SIGNATURE","","",null,null],[17,"GMIME_OPENPGP_END_PGP_SIGNATURE","","",null,null],[17,"GMIME_OPENPGP_BEGIN_PGP_PUBLIC_KEY_BLOCK","","",null,null],[17,"GMIME_OPENPGP_END_PGP_PUBLIC_KEY_BLOCK","","",null,null],[17,"GMIME_OPENPGP_BEGIN_PGP_PRIVATE_KEY_BLOCK","","",null,null],[17,"GMIME_OPENPGP_END_PGP_PRIVATE_KEY_BLOCK","","",null,null],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"gmimedecryptflags"}}],[11,"partial_cmp","","",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"name":"bool"}}],[11,"le","","",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"name":"bool"}}],[11,"gt","","",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"name":"bool"}}],[11,"ge","","",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"name":"bool"}}],[11,"cmp","","",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"name":"ordering"}}],[11,"hash","","",119,null],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",119,null],[18,"EXPORT_SESSION_KEY","","",119,null],[11,"empty","","Returns an empty set of flags.",119,{"inputs":[],"output":{"name":"gmimedecryptflags"}}],[11,"all","","Returns the set containing all flags.",119,{"inputs":[],"output":{"name":"gmimedecryptflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",119,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",119,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gmimedecryptflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",119,{"inputs":[{"name":"c_uint"}],"output":{"name":"gmimedecryptflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"name":"gmimedecryptflags"}}],[11,"bitor_assign","","Adds the set of flags.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"name":"gmimedecryptflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"name":"gmimedecryptflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":{"name":"gmimedecryptflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",119,{"inputs":[{"name":"self"},{"name":"gmimedecryptflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",119,{"inputs":[{"name":"self"}],"output":{"name":"gmimedecryptflags"}}],[11,"extend","","",119,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",119,{"inputs":[{"name":"t"}],"output":{"name":"gmimedecryptflags"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterbestflags"}}],[11,"partial_cmp","","",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"name":"bool"}}],[11,"le","","",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"name":"bool"}}],[11,"gt","","",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"name":"bool"}}],[11,"ge","","",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"name":"bool"}}],[11,"cmp","","",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"name":"ordering"}}],[11,"hash","","",120,null],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"CHARSET","","",120,null],[18,"ENCODING","","",120,null],[11,"empty","","Returns an empty set of flags.",120,{"inputs":[],"output":{"name":"gmimefilterbestflags"}}],[11,"all","","Returns the set containing all flags.",120,{"inputs":[],"output":{"name":"gmimefilterbestflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",120,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",120,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gmimefilterbestflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",120,{"inputs":[{"name":"c_uint"}],"output":{"name":"gmimefilterbestflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"name":"gmimefilterbestflags"}}],[11,"bitor_assign","","Adds the set of flags.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"name":"gmimefilterbestflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"name":"gmimefilterbestflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":{"name":"gmimefilterbestflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",120,{"inputs":[{"name":"self"},{"name":"gmimefilterbestflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",120,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterbestflags"}}],[11,"extend","","",120,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",120,{"inputs":[{"name":"t"}],"output":{"name":"gmimefilterbestflags"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"gmimeopenpgpstate"}}],[11,"partial_cmp","","",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"name":"bool"}}],[11,"le","","",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"name":"bool"}}],[11,"gt","","",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"name":"bool"}}],[11,"ge","","",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"name":"bool"}}],[11,"cmp","","",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"name":"ordering"}}],[11,"hash","","",121,null],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","",121,null],[18,"BEGIN_PGP_MESSAGE","","",121,null],[18,"END_PGP_MESSAGE","","",121,null],[18,"BEGIN_PGP_SIGNED_MESSAGE","","",121,null],[18,"BEGIN_PGP_SIGNATURE","","",121,null],[18,"END_PGP_SIGNATURE","","",121,null],[18,"BEGIN_PGP_PUBLIC_KEY_BLOCK","","",121,null],[18,"END_PGP_PUBLIC_KEY_BLOCK","","",121,null],[18,"BEGIN_PGP_PRIVATE_KEY_BLOCK","","",121,null],[18,"END_PGP_PRIVATE_KEY_BLOCK","","",121,null],[11,"empty","","Returns an empty set of flags.",121,{"inputs":[],"output":{"name":"gmimeopenpgpstate"}}],[11,"all","","Returns the set containing all flags.",121,{"inputs":[],"output":{"name":"gmimeopenpgpstate"}}],[11,"bits","","Returns the raw value of the flags currently stored.",121,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",121,{"inputs":[{"name":"c_uint"}],"output":{"generics":["gmimeopenpgpstate"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",121,{"inputs":[{"name":"c_uint"}],"output":{"name":"gmimeopenpgpstate"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"name":"gmimeopenpgpstate"}}],[11,"bitor_assign","","Adds the set of flags.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"name":"gmimeopenpgpstate"}}],[11,"bitxor_assign","","Toggles the set of flags.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"name":"gmimeopenpgpstate"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":{"name":"gmimeopenpgpstate"}}],[11,"sub_assign","","Disables all flags enabled in the set.",121,{"inputs":[{"name":"self"},{"name":"gmimeopenpgpstate"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",121,{"inputs":[{"name":"self"}],"output":{"name":"gmimeopenpgpstate"}}],[11,"extend","","",121,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",121,{"inputs":[{"name":"t"}],"output":{"name":"gmimeopenpgpstate"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"gmimeapplicationpkcs7mimeclass"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"gmimeautocryptheaderclass"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"gmimeautocryptheaderlistclass"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"gmimecertificateclass"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"gmimecertificatelistclass"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gmimecharset"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"gmimecontentdispositionclass"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"gmimecontenttypeclass"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"gmimecryptocontextclass"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"gmimedatawrapperclass"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"gmimedecryptresultclass"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"gmimeencoding"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterbasicclass"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterbestclass"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"gmimefiltercharsetclass"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterchecksumclass"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterclass"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterdos2unixclass"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterenrichedclass"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterfromclass"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"gmimefiltergzipclass"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterhtmlclass"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilteropenpgpclass"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"gmimefiltersmtpdataclass"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterstripclass"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterunix2dosclass"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterwindowsclass"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilteryencclass"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"gmimeheaderclass"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"gmimeheaderlistclass"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"gmimemessageclass"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"gmimemessagepartclass"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"gmimemessagepartialclass"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"gmimemultipartclass"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"gmimemultipartencryptedclass"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"gmimemultipartsignedclass"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"gmimeobjectclass"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"gmimeopenpgpmarker"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"gmimeparamclass"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"gmimeparamlistclass"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"gmimeparserclass"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"gmimepartclass"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"gmimereferences"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"gmimesignatureclass"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"gmimesignaturelistclass"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreambufferclass"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamcatclass"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamclass"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamfileclass"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamfilterclass"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamfsclass"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamgioclass"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamiovector"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreammemclass"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreammmapclass"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamnullclass"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreampipeclass"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"gmimetextpartclass"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"internetaddressclass"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"internetaddressgroupclass"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"internetaddresslistclass"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"internetaddressmailboxclass"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"gmimeapplicationpkcs7mime"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"gmimeautocryptheader"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"gmimeautocryptheaderlist"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"gmimecertificate"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"gmimecertificatelist"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"gmimecontentdisposition"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"gmimecontenttype"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"gmimecryptocontext"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"gmimedatawrapper"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"gmimedecryptresult"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilter"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterbasic"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"gmimefiltercharset"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterchecksum"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterdos2unix"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterenriched"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterfrom"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"gmimefiltergzip"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilteropenpgp"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"gmimefiltersmtpdata"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterstrip"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterunix2dos"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilterwindows"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"gmimefilteryenc"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"gmimeheader"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"gmimeheaderlist"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"gmimemessage"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"gmimemessagepart"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"gmimemessagepartial"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"gmimemultipart"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"gmimemultipartencrypted"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"gmimemultipartsigned"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"gmimeobject"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"gmimeparam"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"gmimeparamlist"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"gmimeparser"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"gmimepart"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"gmimesignature"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"gmimesignaturelist"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"gmimestream"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreambuffer"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamcat"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamfile"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamfilter"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamfs"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamgio"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreammem"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreammmap"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreamnull"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"gmimestreampipe"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"gmimetextpart"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"internetaddress"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"internetaddressgroup"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"internetaddresslist"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"internetaddressmailbox"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"GMimeApplicationPkcs7MimeClass"],[3,"GMimeAutocryptHeaderClass"],[3,"GMimeAutocryptHeaderListClass"],[3,"GMimeCertificateClass"],[3,"GMimeCertificateListClass"],[3,"GMimeCharset"],[3,"GMimeContentDispositionClass"],[3,"GMimeContentTypeClass"],[3,"GMimeCryptoContextClass"],[3,"GMimeDataWrapperClass"],[3,"GMimeDecryptResultClass"],[3,"GMimeEncoding"],[3,"GMimeFilterBasicClass"],[3,"GMimeFilterBestClass"],[3,"GMimeFilterCharsetClass"],[3,"GMimeFilterChecksumClass"],[3,"GMimeFilterClass"],[3,"GMimeFilterDos2UnixClass"],[3,"GMimeFilterEnrichedClass"],[3,"GMimeFilterFromClass"],[3,"GMimeFilterGZipClass"],[3,"GMimeFilterHTMLClass"],[3,"GMimeFilterOpenPGPClass"],[3,"GMimeFilterSmtpDataClass"],[3,"GMimeFilterStripClass"],[3,"GMimeFilterUnix2DosClass"],[3,"GMimeFilterWindowsClass"],[3,"GMimeFilterYencClass"],[3,"GMimeHeaderClass"],[3,"GMimeHeaderListClass"],[3,"GMimeMessageClass"],[3,"GMimeMessagePartClass"],[3,"GMimeMessagePartialClass"],[3,"GMimeMultipartClass"],[3,"GMimeMultipartEncryptedClass"],[3,"GMimeMultipartSignedClass"],[3,"GMimeObjectClass"],[3,"GMimeOpenPGPMarker"],[3,"GMimeParamClass"],[3,"GMimeParamListClass"],[3,"GMimeParserClass"],[3,"GMimePartClass"],[3,"GMimeReferences"],[3,"GMimeSignatureClass"],[3,"GMimeSignatureListClass"],[3,"GMimeStreamBufferClass"],[3,"GMimeStreamCatClass"],[3,"GMimeStreamClass"],[3,"GMimeStreamFileClass"],[3,"GMimeStreamFilterClass"],[3,"GMimeStreamFsClass"],[3,"GMimeStreamGIOClass"],[3,"GMimeStreamIOVector"],[3,"GMimeStreamMemClass"],[3,"GMimeStreamMmapClass"],[3,"GMimeStreamNullClass"],[3,"GMimeStreamPipeClass"],[3,"GMimeTextPartClass"],[3,"InternetAddressClass"],[3,"InternetAddressGroupClass"],[3,"InternetAddressListClass"],[3,"InternetAddressMailboxClass"],[3,"GMimeApplicationPkcs7Mime"],[3,"GMimeAutocryptHeader"],[3,"GMimeAutocryptHeaderList"],[3,"GMimeCertificate"],[3,"GMimeCertificateList"],[3,"GMimeContentDisposition"],[3,"GMimeContentType"],[3,"GMimeCryptoContext"],[3,"GMimeDataWrapper"],[3,"GMimeDecryptResult"],[3,"GMimeFilter"],[3,"GMimeFilterBasic"],[3,"GMimeFilterBest"],[3,"GMimeFilterCharset"],[3,"GMimeFilterChecksum"],[3,"GMimeFilterDos2Unix"],[3,"GMimeFilterEnriched"],[3,"GMimeFilterFrom"],[3,"GMimeFilterGZip"],[3,"GMimeFilterHTML"],[3,"GMimeFilterOpenPGP"],[3,"GMimeFilterSmtpData"],[3,"GMimeFilterStrip"],[3,"GMimeFilterUnix2Dos"],[3,"GMimeFilterWindows"],[3,"GMimeFilterYenc"],[3,"GMimeHeader"],[3,"GMimeHeaderList"],[3,"GMimeMessage"],[3,"GMimeMessagePart"],[3,"GMimeMessagePartial"],[3,"GMimeMultipart"],[3,"GMimeMultipartEncrypted"],[3,"GMimeMultipartSigned"],[3,"GMimeObject"],[3,"GMimeParam"],[3,"GMimeParamList"],[3,"GMimeParser"],[3,"GMimePart"],[3,"GMimeSignature"],[3,"GMimeSignatureList"],[3,"GMimeStream"],[3,"GMimeStreamBuffer"],[3,"GMimeStreamCat"],[3,"GMimeStreamFile"],[3,"GMimeStreamFilter"],[3,"GMimeStreamFs"],[3,"GMimeStreamGIO"],[3,"GMimeStreamMem"],[3,"GMimeStreamMmap"],[3,"GMimeStreamNull"],[3,"GMimeStreamPipe"],[3,"GMimeTextPart"],[3,"InternetAddress"],[3,"InternetAddressGroup"],[3,"InternetAddressList"],[3,"InternetAddressMailbox"],[3,"GMimeDecryptFlags"],[3,"GMimeFilterBestFlags"],[3,"GMimeOpenPGPState"],[3,"GMimeFormatOptions"],[3,"GMimeGpgContextClass"],[3,"GMimeParserOptions"],[3,"GMimePartIter"],[3,"GMimePkcs7ContextClass"],[3,"GMimeGpgContext"],[3,"GMimePkcs7Context"]]};
initSearch(searchIndex);
